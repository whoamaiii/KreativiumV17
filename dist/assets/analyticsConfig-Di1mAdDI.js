import{l as a}from"./logger-Bi5o39IC.js";const g={analyticsConfig:"sensory-compass-analytics-config",analyticsProfiles:"sensoryTracker_analyticsProfiles",cachePrefix:"analytics-cache",performancePrefix:"performance-cache"},i={schemaVersion:"2.3.0",features:{enableStructuredInsights:!1,enableSummaryFacade:!0},featureEngineering:{timeEncoding:{variant:"sixFeatureV1"},normalization:{clampToUnit:!0,minVariance:1e-9}},patternAnalysis:{minDataPoints:3,correlationThreshold:.25,highIntensityThreshold:4,concernFrequencyThreshold:.3,emotionConsistencyThreshold:.4,moderateNegativeThreshold:.4},enhancedAnalysis:{minSampleSize:5,trendThreshold:.02,predictionConfidenceThreshold:.6,anomalyThreshold:2.5,anomalySeverityLevels:{medium:2.5,high:3},huber:{delta:1.345,maxIter:50,tol:1e-6},qualityTargets:{pointsTarget:30,timeSpanDaysTarget:21},correlationSignificance:{high:.7,moderate:.5,low:.3},riskAssessment:{stressIntensityThreshold:4,stressEmotions:["anxious","frustrated","overwhelmed","angry"]}},timeWindows:{defaultAnalysisDays:30,recentDataDays:7,shortTermDays:14,longTermDays:90},alertSensitivity:{level:"medium",emotionIntensityMultiplier:1,frequencyMultiplier:1,anomalyMultiplier:1},cache:{ttl:600*1e3,maxSize:50,invalidateOnConfigChange:!0},insights:{MIN_SESSIONS_FOR_FULL_ANALYTICS:5,HIGH_CONFIDENCE_PATTERN_THRESHOLD:.6,MAX_PATTERNS_TO_SHOW:2,MAX_CORRELATIONS_TO_SHOW:2,MAX_PREDICTIONS_TO_SHOW:2,RECENT_EMOTION_COUNT:7,POSITIVE_EMOTION_TREND_THRESHOLD:.6,NEGATIVE_EMOTION_TREND_THRESHOLD:.3},confidence:{THRESHOLDS:{EMOTION_ENTRIES:10,SENSORY_ENTRIES:10,TRACKING_ENTRIES:5,DAYS_SINCE_LAST_ENTRY:7},WEIGHTS:{EMOTION:.3,SENSORY:.3,TRACKING:.4,RECENCY_BOOST:.1}},healthScore:{WEIGHTS:{PATTERNS:20,CORRELATIONS:20,PREDICTIONS:20,ANOMALIES:20,MINIMUM_DATA:20}},analytics:{MIN_TRACKING_FOR_CORRELATION:3,MIN_TRACKING_FOR_ENHANCED:2,ANALYSIS_PERIOD_DAYS:30},taxonomy:{positiveEmotions:["happy","calm","excited","content","peaceful","cheerful","relaxed","optimistic"]}},y={conservative:{name:"Conservative",description:"Higher thresholds, fewer alerts, more data required",config:{...i,schemaVersion:"2.3.0",patternAnalysis:{...i.patternAnalysis,minDataPoints:5,correlationThreshold:.4,concernFrequencyThreshold:.4},enhancedAnalysis:{...i.enhancedAnalysis,anomalyThreshold:3,minSampleSize:8},alertSensitivity:{level:"low",emotionIntensityMultiplier:.8,frequencyMultiplier:.8,anomalyMultiplier:.8}}},balanced:{name:"Balanced",description:"Default settings, balanced sensitivity",config:{...i,schemaVersion:"2.3.0"}},sensitive:{name:"Sensitive",description:"Lower thresholds, more alerts, less data required",config:{...i,schemaVersion:"2.3.0",patternAnalysis:{...i.patternAnalysis,minDataPoints:2,correlationThreshold:.15,concernFrequencyThreshold:.2},enhancedAnalysis:{...i.enhancedAnalysis,anomalyThreshold:2,minSampleSize:3},alertSensitivity:{level:"high",emotionIntensityMultiplier:1.2,frequencyMultiplier:1.2,anomalyMultiplier:1.2}}}};class s{static instance;config;listeners=[];storageKey="sensory-compass-analytics-config";constructor(){this.config=this.loadConfig()}static getInstance(){return s.instance||(s.instance=new s),s.instance}getConfig(){return{...this.config}}updateConfig(t){this.config=this.deepMerge(this.config,t),this.saveConfig(),this.notifyListeners()}setPreset(t){const e=y[t];e&&(this.config={...e.config},this.saveConfig(),this.notifyListeners())}resetToDefaults(){this.config={...i},this.saveConfig(),this.notifyListeners()}subscribe(t){return this.listeners.push(t),()=>{this.listeners=this.listeners.filter(e=>e!==t)}}exportConfig(){return JSON.stringify(this.config,null,2)}importConfig(t){try{const e=JSON.parse(t);return this.validateConfig(e)?(this.config=e,this.saveConfig(),this.notifyListeners(),!0):!1}catch(e){return a.error("Failed to import configuration:",e),!1}}loadConfig(){try{if(typeof window>"u"||typeof localStorage>"u")return{...i};const t=localStorage.getItem(this.storageKey);if(t){const e=JSON.parse(t);if(this.validateConfig(e))return e}}catch(t){a.error("Failed to load analytics configuration:",t)}return{...i}}saveConfig(){try{if(typeof window<"u"&&typeof localStorage<"u")try{localStorage.setItem(this.storageKey,JSON.stringify(this.config))}catch(t){try{localStorage.removeItem(this.storageKey)}catch{}a.error("Failed to save analytics configuration:",t)}}catch(t){a.error("Failed to save analytics configuration:",t)}}notifyListeners(){const t={...this.config};this.listeners.forEach(e=>e(t))}deepMerge(t,e){const l=JSON.parse(JSON.stringify(t)),c=(h,f)=>{Object.keys(f).forEach(o=>{const n=f[o],r=h[o];n!=null&&(typeof n=="object"&&!Array.isArray(n)&&r&&typeof r=="object"&&!Array.isArray(r)?c(r,n):h[o]=n)})};return c(l,e),l}validateConfig(t){if(!t||typeof t!="object")return!1;const e=t;return typeof e.schemaVersion=="string"&&!!e.featureEngineering&&!!e.patternAnalysis&&!!e.enhancedAnalysis&&!!e.timeWindows&&!!e.alertSensitivity&&!!e.cache&&!!e.insights&&!!e.confidence&&!!e.healthScore&&!!e.analytics&&!!e.taxonomy}}const S=s.getInstance(),m={...i,POSITIVE_EMOTIONS:new Set(["happy","calm","excited","content","peaceful","cheerful","relaxed","optimistic"])};export{m as A,i as D,y as P,g as S,S as a};

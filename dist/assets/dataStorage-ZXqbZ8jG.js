import{l as d}from"./logger-Bi5o39IC.js";import{storageUtils as h}from"./storageUtils-DyonkL-b.js";const n={STUDENTS:"sensoryTracker_students",TRACKING_ENTRIES:"sensoryTracker_entries",GOALS:"sensoryTracker_goals",INTERVENTIONS:"sensoryTracker_interventions",ALERTS:"sensoryTracker_alerts",CORRELATIONS:"sensoryTracker_correlations",DATA_VERSION:"sensoryTracker_dataVersion",STORAGE_INDEX:"sensoryTracker_index",PREFERENCES:"sensoryTracker_preferences"},I=1,S=c=>{const t=c;return!!(t&&typeof t.id=="string"&&typeof t.name=="string")},u=c=>{const t=c;return!!(t&&typeof t.id=="string"&&typeof t.studentId=="string"&&t.timestamp&&Array.isArray(t.emotions)&&Array.isArray(t.sensoryInputs))};class g{static instance;storageIndex;constructor(){this.storageIndex=this.loadStorageIndex(),this.initializeDataVersion()}static getInstance(){return g.instance||(g.instance=new g),g.instance}initializeDataVersion(){const t=this.getDataVersion();t<I&&this.migrateData(t,I)}getDataVersion(){const t=localStorage.getItem(n.DATA_VERSION);return t?JSON.parse(t).version:0}migrateData(t,e){const s={1:()=>{this.addVersionToExistingData()}};for(let a=t+1;a<=e;a++)if(s[a])try{s[a](),d.info(`Successfully migrated to version ${a}`)}catch(o){d.error(`Migration to version ${a} failed:`,o)}const r={version:e,timestamp:new Date,changes:[`Migrated from version ${t} to ${e}`]};localStorage.setItem(n.DATA_VERSION,JSON.stringify(r))}addVersionToExistingData(){const t=this.getAll(n.STUDENTS);t.forEach(s=>{s.version||(s.version=1,s.lastUpdated=new Date)}),this.saveAll(n.STUDENTS,t);const e=this.getAll(n.TRACKING_ENTRIES);e.forEach(s=>{s.version||(s.version=1)}),this.saveAll(n.TRACKING_ENTRIES,e)}loadStorageIndex(){const t=localStorage.getItem(n.STORAGE_INDEX);if(t){const e=JSON.parse(t),s=["students","trackingEntries","goals","interventions","alerts"];for(const r of s)if(e[r]){const a=Object.entries(e[r]);e[r]=a.reduce((o,[l,i])=>(o[l]=new Date(i),o),{})}return e.lastUpdated=new Date(e.lastUpdated),e}return{students:{},trackingEntries:{},goals:{},interventions:{},alerts:{},lastUpdated:new Date}}saveStorageIndex(){this.storageIndex.lastUpdated=new Date,h.safeSetItem(n.STORAGE_INDEX,JSON.stringify(this.storageIndex))}getAll(t,e){try{const s=localStorage.getItem(t);if(!s)return[];const r=JSON.parse(s),o=(Array.isArray(r)?r:[]).map(l=>this.convertDates(l));return e?o.filter(e):o}catch(s){return d.error(`Error loading ${t}:`,s),[]}}saveAll(t,e){try{h.safeSetItem(t,JSON.stringify(e))}catch(s){d.error(`Error saving ${t}:`,s);const r=s instanceof Error?s.message:"Unknown error";throw new Error(`Failed to save data: ${r}`)}}convertDates(t){if(!t)return t;if(typeof t=="string"&&/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/.test(t))return new Date(t);if(Array.isArray(t))return t.map(e=>this.convertDates(e));if(typeof t=="object"&&t!==null){const e={};for(const[s,r]of Object.entries(t))e[s]=this.convertDates(r);return e}return t}getStudents(){return this.getAll(n.STUDENTS,S)}getStudentById(t){try{const s=this.getStudents().find(r=>r.id===t);return s?{...s,createdAt:new Date(s.createdAt)}:null}catch(e){return d.error("Failed to parse student data from localStorage",e),null}}saveStudent(t){const e=this.getStudents(),s=e.findIndex(r=>r.id===t.id);t.lastUpdated=new Date,t.version=(t.version||0)+1,s>=0?e[s]=t:e.push(t),this.saveAll(n.STUDENTS,e),this.storageIndex.students[t.id]=new Date,this.saveStorageIndex()}getTrackingEntries(){return this.getAll(n.TRACKING_ENTRIES,u)}getTrackingEntriesForStudent(t){return this.getTrackingEntries().filter(e=>e.studentId===t)}getEntriesForStudent(t){try{return this.getTrackingEntries().filter(s=>s.studentId===t).map(s=>({...s,timestamp:new Date(s.timestamp),emotions:s.emotions.map(r=>({...r,timestamp:new Date(r.timestamp)})),sensoryInputs:s.sensoryInputs.map(r=>({...r,timestamp:new Date(r.timestamp)}))})).sort((s,r)=>r.timestamp.getTime()-s.timestamp.getTime())}catch(e){return d.error("Failed to parse tracking entries from localStorage",e),[]}}saveTrackingEntry(t){const e=this.getTrackingEntries(),s=e.findIndex(r=>r.id===t.id);t.version=(t.version||0)+1,s>=0?e[s]=t:e.push(t),this.saveAll(n.TRACKING_ENTRIES,e),this.storageIndex.trackingEntries[t.id]=t.timestamp,this.saveStorageIndex()}getGoals(){return this.getAll(n.GOALS)}getGoalsForStudent(t){return this.getGoals().filter(e=>e.studentId===t)}saveGoal(t){const e=this.getGoals(),s=e.findIndex(r=>r.id===t.id);s>=0?e[s]=t:e.push(t),this.saveAll(n.GOALS,e),this.storageIndex.goals[t.id]=new Date,this.saveStorageIndex()}getInterventions(){return this.getAll(n.INTERVENTIONS)}getInterventionsForStudent(t){return this.getInterventions().filter(e=>e.studentId===t)}saveIntervention(t){const e=this.getInterventions(),s=e.findIndex(r=>r.id===t.id);s>=0?e[s]=t:e.push(t),this.saveAll(n.INTERVENTIONS,e),this.storageIndex.interventions[t.id]=new Date,this.saveStorageIndex()}getAlerts(){return this.getAll(n.ALERTS)}getAlertsForStudent(t){return this.getAlerts().filter(e=>e.studentId===t)}saveAlert(t){const e=this.getAlerts(),s=e.findIndex(r=>r.id===t.id);s>=0?e[s]=t:e.push(t),this.saveAll(n.ALERTS,e),this.storageIndex.alerts[t.id]=t.timestamp,this.saveStorageIndex()}getCorrelations(){return this.getAll(n.CORRELATIONS)}getCorrelationsForStudent(t){return this.getCorrelations().filter(e=>e.studentId===t)}saveCorrelation(t){const e=this.getCorrelations(),s=e.findIndex(r=>r.id===t.id);s>=0?e[s]=t:e.push(t),this.saveAll(n.CORRELATIONS,e)}exportAllData(){const t={version:this.getDataVersion(),exportDate:new Date,students:this.getStudents(),trackingEntries:this.getTrackingEntries(),goals:this.getGoals(),interventions:this.getInterventions(),alerts:this.getAlerts(),correlations:this.getCorrelations(),index:this.storageIndex};return JSON.stringify(t,null,2)}importAllData(t){try{const e=JSON.parse(t);if(!e.version||!e.students||!Array.isArray(e.students))throw new Error("Invalid data format");this.saveAll(n.STUDENTS,e.students||[]),this.saveAll(n.TRACKING_ENTRIES,e.trackingEntries||[]),this.saveAll(n.GOALS,e.goals||[]),this.saveAll(n.INTERVENTIONS,e.interventions||[]),this.saveAll(n.ALERTS,e.alerts||[]),this.saveAll(n.CORRELATIONS,e.correlations||[]),e.index&&(this.storageIndex=this.convertDates(e.index),this.saveStorageIndex())}catch(e){throw new Error(`Import failed: ${e instanceof Error?e.message:"Unknown error"}`)}}clearAllData(){Object.values(n).forEach(t=>{localStorage.removeItem(t)}),this.storageIndex={students:{},trackingEntries:{},goals:{},interventions:{},alerts:{},lastUpdated:new Date}}getStorageStats(){const t=this.getStudents(),e=this.getTrackingEntries(),s=this.getGoals(),r=this.getInterventions(),a=this.getAlerts();let o=0;return Object.values(n).forEach(l=>{const i=localStorage.getItem(l);o+=i?i.length:0}),{studentsCount:t.length,entriesCount:e.length,goalsCount:s.length,interventionsCount:r.length,alertsCount:a.length,totalSize:o}}deleteStudent(t){try{const e=this.getStudents().filter(i=>i.id!==t);this.saveAll(n.STUDENTS,e);const s=this.getTrackingEntries().filter(i=>i.studentId!==t);this.saveAll(n.TRACKING_ENTRIES,s);const r=this.getGoals().filter(i=>i.studentId!==t);this.saveAll(n.GOALS,r);const a=this.getInterventions().filter(i=>i.studentId!==t);this.saveAll(n.INTERVENTIONS,a);const o=this.getAlerts().filter(i=>i.studentId!==t);this.saveAll(n.ALERTS,o);const l=this.getCorrelations().filter(i=>i.studentId!==t);this.saveAll(n.CORRELATIONS,l),this.storageIndex.students&&delete this.storageIndex.students[t],this.saveStorageIndex()}catch(e){throw d.error("Error deleting student:",e),e}}}const v=g.getInstance();export{v as d};

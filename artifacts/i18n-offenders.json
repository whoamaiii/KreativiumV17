{
  "generatedAt": "2025-08-13T04:50:45.959Z",
  "offenders": [
    {
      "file": "src/App.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading...",
      "line": 31,
      "column": 38,
      "context": "<Toaster /> <BrowserRouter> <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\"/\" elemen"
    },
    {
      "file": "src/workers/analytics.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analytics.worker] error",
      "line": 357,
      "column": 18,
      "context": "'complete', percent: 100 } }); } catch (error) { try { logger.error('[analytics.worker] error', error); } catch { /* noop */ } log"
    },
    {
      "file": "src/workers/analytics.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in analytics worker:",
      "line": 361,
      "column": 18,
      "context": "s.worker] error', error); } catch { /* noop */ } logger.error('Error in analytics worker:', error); // Post an error message back to the m"
    },
    {
      "file": "src/workers/hyperparameterOptimization.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in hyperparameter optimization worker:",
      "line": 125,
      "column": 18,
      "context": "the main thread postMessage(result); } catch (error) { logger.error('Error in hyperparameter optimization worker:', error); // Post error messag"
    },
    {
      "file": "src/workers/hyperparameterOptimization.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Grid search failed:",
      "line": 297,
      "column": 18,
      "context": "r strategy: 'gridSearch' }; } catch (error) { logger.error('Grid search failed:', error); throw new Error(`Grid search optimization fai"
    },
    {
      "file": "src/workers/hyperparameterOptimization.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Random search failed:",
      "line": 426,
      "column": 18,
      "context": "strategy: 'randomSearch' }; } catch (error) { logger.error('Random search failed:', error); throw new Error(`Random search optimization"
    },
    {
      "file": "src/pages/AddStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error adding student:",
      "line": 55,
      "column": 20,
      "context": "dent.success'))); navigate('/'); } catch (error) { logger.error('Error adding student:', error); const errorMessage = error instanceof Err"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Dashboard: Error loading students",
      "line": 42,
      "column": 22,
      "context": "(); setStudents(students); } catch (error) { logger.error('Dashboard: Error loading students', { error }); setStudents([]);"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Dashboard: Error calculating statistics",
      "line": 121,
      "column": 20,
      "context": "tries: entriesTrend } }; } catch (error) { logger.error('Dashboard: Error calculating statistics', { error }); return { todayEntri"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Report exported successfully",
      "line": 171,
      "column": 21,
      "context": "L] Revoked URL after CSV export', { url: blobUrl }); toast.success('Report exported successfully'); } catch { toast.error('Export failed."
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Report exported successfully",
      "line": 171,
      "column": 21,
      "context": "L] Revoked URL after CSV export', { url: blobUrl }); toast.success('Report exported successfully'); } catch { toast.error('Export failed."
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export failed. Please try again.",
      "line": 173,
      "column": 19,
      "context": "toast.success('Report exported successfully'); } catch { toast.error('Export failed. Please try again.'); } }; const handleViewStudent = (st"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Export failed. Please try again.",
      "line": 173,
      "column": 19,
      "context": "toast.success('Report exported successfully'); } catch { toast.error('Export failed. Please try again.'); } }; const handleViewStudent = (st"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Skip to main content",
      "line": 192,
      "column": 9,
      "context": "imary text-primary-foreground px-4 py-2 rounded-md font-medium\" > Skip to main content </a> {/* Animated glow background */}"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 205,
      "column": 17,
      "context": "className=\"text-4xl font-bold tracking-tight text-foreground\"> Sensory<span className=\"text-primary\">Tracker</span> - {String(tDashboard('title"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tracker",
      "line": 205,
      "column": 55,
      "context": "g-tight text-foreground\"> Sensory<span className=\"text-primary\">Tracker</span> - {String(tDashboard('title')).split(' - ')[1]} </h"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Mock Data",
      "line": 214,
      "column": 63,
      "context": "gTrigger asChild> <Button variant=\"outline\" size=\"icon\" title=\"Mock Data\" aria-label=\"Open mock data loader\"> <FlaskConica"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Open mock data loader",
      "line": 214,
      "column": 86,
      "context": "<Button variant=\"outline\" size=\"icon\" title=\"Mock Data\" aria-label=\"Open mock data loader\"> <FlaskConical className=\"h-4 w-4\" /"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data Loader",
      "line": 220,
      "column": 34,
      "context": "=\"max-w-2xl\"> <DialogHeader> <DialogTitle>Mock Data Loader</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Storage Management",
      "line": 227,
      "column": 63,
      "context": "gTrigger asChild> <Button variant=\"outline\" size=\"icon\" title=\"Storage Management\" aria-label=\"Open storage management\"> <"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Open storage management",
      "line": 227,
      "column": 95,
      "context": "<Button variant=\"outline\" size=\"icon\" title=\"Storage Management\" aria-label=\"Open storage management\"> <Database className=\"h-4 w-4\" />"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage Management",
      "line": 233,
      "column": 34,
      "context": "=\"max-w-2xl\"> <DialogHeader> <DialogTitle>Storage Management</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Oversikt",
      "line": 296,
      "column": 81,
      "context": "<h2 className=\"text-3xl font-bold tracking-tight text-foreground\">Oversikt</h2> <div className=\"flex items-center space-x-4\">"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Eksporter Rapport",
      "line": 309,
      "column": 23,
      "context": "<Download className=\"mr-2 h-4 w-4\" /> Eksporter Rapport </Button> </AlertDialogT"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Are you sure?",
      "line": 314,
      "column": 41,
      "context": "<AlertDialogHeader> <AlertDialogTitle>Are you sure?</AlertDialogTitle> <AlertDialogDescription>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "This will export the report as a CSV file.",
      "line": 316,
      "column": 25,
      "context": "ogTitle> <AlertDialogDescription> This will export the report as a CSV file. </AlertDialogDe"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 320,
      "column": 42,
      "context": "<AlertDialogFooter> <AlertDialogCancel>Cancel</AlertDialogCancel> <AlertDialogAction onClick={han"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Continue",
      "line": 321,
      "column": 71,
      "context": "ogCancel> <AlertDialogAction onClick={handleExportReport}>Continue</AlertDialogAction> </AlertDialogFooter>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ny Registrering",
      "line": 332,
      "column": 19,
      "context": "<Plus className=\"mr-2 h-4 w-4 group-hover:animate-bounce\" /> Ny Registrering </Button> </div> </div"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "from last week",
      "line": 357,
      "column": 64,
      "context": "ixed(0)}%</span> <span className=\"ml-1 text-muted-foreground\">from last week</span> </div> </Card>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "from last week",
      "line": 379,
      "column": 64,
      "context": "ixed(0)}%</span> <span className=\"ml-1 text-muted-foreground\">from last week</span> </div> </Card>"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "from last week",
      "line": 401,
      "column": 64,
      "context": "d-400\">5%</span> <span className=\"ml-1 text-muted-foreground\">from last week</span> </div> </Card> <"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Elever",
      "line": 412,
      "column": 67,
      "context": "> <h2 className=\"text-3xl font-bold tracking-tight\">Elever</h2> <Button variant=\"default\""
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Legg til elev",
      "line": 420,
      "column": 19,
      "context": "2 h-4 w-4 group-hover:animate-bounce transition-transform\" /> Legg til elev </Button> </div> {/*"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Want to explore with sample data?",
      "line": 508,
      "column": 79,
      "context": "> <h4 className=\"text-lg font-semibold text-foreground\">Want to explore with sample data?</h4> <p className=\"tex"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load mock data to test features and see how the app works",
      "line": 510,
      "column": 27,
      "context": "<p className=\"text-sm text-muted-foreground mt-1\"> Load mock data to test features and see how the app works"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Sample Data",
      "line": 517,
      "column": 29,
      "context": "<FlaskConical className=\"h-4 w-4 mr-2\" /> Load Sample Data </Button> </D"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data Loader",
      "line": 522,
      "column": 42,
      "context": "<DialogHeader> <DialogTitle>Mock Data Loader</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/pages/NotFound.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "404 Error: User attempted to access non-existent route",
      "line": 14,
      "column": 18,
      "context": "; const { tCommon } = useTranslation(); useEffect(() => { logger.error(\"404 Error: User attempted to access non-existent route\", { path: location"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Auto-seeding minimal demo data for mock route",
      "line": 157,
      "column": 21,
      "context": ".current = true; setIsSeedingData(true); try { logger.info('Auto-seeding minimal demo data for mock route', { studentId });"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Demo data created successfully",
      "line": 166,
      "column": 23,
      "context": "); // Show non-intrusive success message toast.success('Demo data created successfully', { description: 'Sample data has been"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Demo data created successfully",
      "line": 166,
      "column": 23,
      "context": "); // Show non-intrusive success message toast.success('Demo data created successfully', { description: 'Sample data has been"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to auto-seed mock data",
      "line": 175,
      "column": 22,
      "context": "reloadData(); } } catch (error) { logger.error('Failed to auto-seed mock data', { error, studentId }); toast.error('Fai"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to create demo data",
      "line": 176,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data', { description: 'Please try loading mock"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to create demo data",
      "line": 176,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data', { description: 'Please try loading mock"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error generating insights",
      "line": 229,
      "column": 24,
      "context": "} } catch (error) { if (!signal.aborted) { logger.error('Error generating insights', { error }); setInsights(null);"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to generate insights",
      "line": 231,
      "column": 23,
      "context": "ating insights', { error }); setInsights(null); toast.error('Failed to generate insights'); } } finally { if (!signal."
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to generate insights",
      "line": 231,
      "column": 23,
      "context": "ating insights', { error }); setInsights(null); toast.error('Failed to generate insights'); } } finally { if (!signal."
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.triggerAnalyticsForStudent failed",
      "line": 259,
      "column": 26,
      "context": "} }) .catch((err) => { logger.error('[SAFE] analyticsManager.triggerAnalyticsForStudent failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.initializeStudentAnalytics failed",
      "line": 271,
      "column": 24,
      "context": "entAnalytics done'); } } catch (err) { logger.error('[SAFE] analyticsManager.initializeStudentAnalytics failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager outer try/catch caught error",
      "line": 276,
      "column": 20,
      "context": "/ Extra safety net; never rethrow from analytics side-effect logger.error('[SAFE] analyticsManager outer try/catch caught error', { error: err }); }"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export error",
      "line": 341,
      "column": 20,
      "context": "as ${format.toUpperCase()}`); } catch (error: unknown) { logger.error('Export error', { error }); const errorMessage = error instanceof Error ?"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Backup created successfully",
      "line": 363,
      "column": 21,
      "context": "]/g, '-')}.json`; downloadBlob(backupBlob, filename); toast.success('Backup created successfully'); } catch (error) { logger.error('Backup"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Backup created successfully",
      "line": 363,
      "column": 21,
      "context": "]/g, '-')}.json`; downloadBlob(backupBlob, filename); toast.success('Backup created successfully'); } catch (error) { logger.error('Backup"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Backup error",
      "line": 365,
      "column": 20,
      "context": "uccess('Backup created successfully'); } catch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Backup failed. Please try again.",
      "line": 366,
      "column": 19,
      "context": "atch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'); } }, [student, trackingEntries, allEm"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Backup failed. Please try again.",
      "line": 366,
      "column": 19,
      "context": "atch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'); } }, [student, trackingEntries, allEm"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "This will only take a moment",
      "line": 383,
      "column": 17,
      "context": "<p className=\"text-sm text-muted-foreground mt-2\"> This will only take a moment </p> )} </div>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Student not found.",
      "line": 396,
      "column": 43,
      "context": "className=\"flex items-center gap-2\"> <p className=\"text-destructive\">Student not found.</p> </div> </div> ); } return ( <S"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Go back to dashboard",
      "line": 415,
      "column": 92,
      "context": "<Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/')} aria-label=\"Go back to dashboard\"> <ArrowLeft className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Open mock data loader",
      "line": 423,
      "column": 119,
      "context": "utline\" size=\"sm\" className=\"flex items-center justify-center group\" aria-label=\"Open mock data loader\"> <FileText className=\"h-4 w-4 mr-2"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Mock Data",
      "line": 425,
      "column": 23,
      "context": "4 w-4 mr-2 transition-transform group-hover:rotate-12\" /> Load Mock Data </Button> </DialogTrigger>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data for Testing & Analysis",
      "line": 430,
      "column": 36,
      "context": "-y-auto\"> <DialogHeader> <DialogTitle>Mock Data for Testing & Analysis</DialogTitle> </DialogHeade"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mål og målstyring",
      "line": 473,
      "column": 56,
      "context": "<div> <h2 className=\"text-2xl font-bold\">Mål og målstyring</h2> <p className=\"text-muted-foreground\">"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Administrer og følg opp",
      "line": 475,
      "column": 23,
      "context": "<p className=\"text-muted-foreground\"> Administrer og følg opp {student.name}s IEP-mål </p>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "s IEP-mål",
      "line": 475,
      "column": 61,
      "context": "-muted-foreground\"> Administrer og følg opp {student.name}s IEP-mål </p> </div> <M"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang og utvikling",
      "line": 484,
      "column": 57,
      "context": "<div> <h2 className=\"text-2xl font-bold\">Fremgang og utvikling</h2> <p className=\"text-muted-foregro"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analyser",
      "line": 486,
      "column": 24,
      "context": "<p className=\"text-muted-foreground\"> Analyser {student.name}s utvikling over tid </p>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "s utvikling over tid",
      "line": 486,
      "column": 47,
      "context": "lassName=\"text-muted-foreground\"> Analyser {student.name}s utvikling over tid </p> </div>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Rapporter og eksport",
      "line": 495,
      "column": 56,
      "context": "<div> <h2 className=\"text-2xl font-bold\">Rapporter og eksport</h2> <p className=\"text-muted-foregroun"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Generer rapporter og eksporter data for",
      "line": 497,
      "column": 23,
      "context": "<p className=\"text-muted-foreground\"> Generer rapporter og eksporter data for {student.name} </p>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Eksporter PDF",
      "line": 502,
      "column": 60,
      "context": "eExportData('pdf')}> <FileText className=\"h-4 w-4 mr-2\" />Eksporter PDF </Button> <Button variant="
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Eksporter CSV",
      "line": 505,
      "column": 60,
      "context": "eExportData('csv')}> <Calendar className=\"h-4 w-4 mr-2\" />Eksporter CSV </Button> <Button variant="
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Eksporter JSON",
      "line": 508,
      "column": 60,
      "context": "ExportData('json')}> <Download className=\"h-4 w-4 mr-2\" />Eksporter JSON </Button> <Button variant"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Opprett backup",
      "line": 511,
      "column": 56,
      "context": "lick={handleBackupData}> <Save className=\"h-4 w-4 mr-2\" />Opprett backup </Button> </div>"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enhanced Tracking Tools",
      "line": 540,
      "column": 58,
      "context": "<div> <h2 className=\"text-2xl font-bold\">Enhanced Tracking Tools</h2> <p className=\"text-muted-fore"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced data collection and smart entry tools for",
      "line": 542,
      "column": 25,
      "context": "<p className=\"text-muted-foreground\"> Advanced data collection and smart entry tools for {student.name}"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enhanced tracking tools coming soon",
      "line": 546,
      "column": 26,
      "context": "iv className=\"text-center py-8 text-muted-foreground\"> <p>Enhanced tracking tools coming soon</p> </div>"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Emotion recorded!",
      "line": 49,
      "column": 19,
      "context": "| 'timestamp'>) => { setEmotions([...emotions, emotion]); toast.success(\"Emotion recorded!\"); }; const handleSensoryAdd = (sensory: Omit<SensoryEnt"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Emotion recorded!",
      "line": 49,
      "column": 19,
      "context": "| 'timestamp'>) => { setEmotions([...emotions, emotion]); toast.success(\"Emotion recorded!\"); }; const handleSensoryAdd = (sensory: Omit<SensoryEnt"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Sensory input recorded!",
      "line": 54,
      "column": 19,
      "context": "mp'>) => { setSensoryInputs([...sensoryInputs, sensory]); toast.success(\"Sensory input recorded!\"); }; const handleEnvironmentalAdd = (environmenta"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Sensory input recorded!",
      "line": 54,
      "column": 19,
      "context": "mp'>) => { setSensoryInputs([...sensoryInputs, sensory]); toast.success(\"Sensory input recorded!\"); }; const handleEnvironmentalAdd = (environmenta"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Environmental conditions recorded!",
      "line": 59,
      "column": 19,
      "context": "| 'timestamp'>) => { setEnvironmentalData(environmental); toast.success(\"Environmental conditions recorded!\"); }; const handleSaveSession = async ("
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Environmental conditions recorded!",
      "line": 59,
      "column": 19,
      "context": "| 'timestamp'>) => { setEnvironmentalData(environmental); toast.success(\"Environmental conditions recorded!\"); }; const handleSaveSession = async ("
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save tracking session",
      "line": 109,
      "column": 20,
      "context": "navigate(`/student/${student.id}`); } catch (error) { logger.error('Failed to save tracking session', { error }); toast.error(String(tTrackin"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Record emotions and sensory responses for this session",
      "line": 156,
      "column": 13,
      "context": "</div> <p className=\"text-muted-foreground\"> Record emotions and sensory responses for this session </p> </"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error saving alerts:",
      "line": 159,
      "column": 20,
      "context": "E_KEY, JSON.stringify(historyToSave)); } catch (error) { logger.error('Error saving alerts:', error); // If we still can't save, try aggressive"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save alerts even after cleanup:",
      "line": 173,
      "column": 22,
      "context": "ory, ...newHistoryEntries])); } catch (retryError) { logger.error('Failed to save alerts even after cleanup:', retryError); } } } /"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading alerts:",
      "line": 199,
      "column": 20,
      "context": "try.resolvedAt) : undefined })); } catch (error) { logger.error('Error loading alerts:', error); return []; } } /** * Retrieve"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error marking alert as viewed:",
      "line": 247,
      "column": 20,
      "context": "E_KEY, JSON.stringify(updatedAlerts)); } catch (error) { logger.error('Error marking alert as viewed:', error); } } /** * Resolves a speci"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error resolving alert:",
      "line": 274,
      "column": 20,
      "context": "E_KEY, JSON.stringify(updatedAlerts)); } catch (error) { logger.error('Error resolving alert:', error); } } /** * Deletes a specific alert"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error deleting alert:",
      "line": 289,
      "column": 20,
      "context": "_KEY, JSON.stringify(filteredAlerts)); } catch (error) { logger.error('Error deleting alert:', error); } } /** * Retrieves the current ale"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading alert settings:",
      "line": 305,
      "column": 20,
      "context": "aultSettings, ...JSON.parse(stored) }; } catch (error) { logger.error('Error loading alert settings:', error); return this.defaultSettings;"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error updating alert settings:",
      "line": 321,
      "column": 20,
      "context": "KEY, JSON.stringify(updatedSettings)); } catch (error) { logger.error('Error updating alert settings:', error); } } /** * Provides a summa"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error cleaning up old alerts:",
      "line": 381,
      "column": 20,
      "context": "- filteredAlerts.length} old alerts`); } catch (error) { logger.error('Error cleaning up old alerts:', error); } } /** * Exports alerts to"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to import configuration:",
      "line": 372,
      "column": 20,
      "context": "onfig structure'); return false; } catch (error) { logger.error('Failed to import configuration:', error); return false; } } priv"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load analytics configuration:",
      "line": 391,
      "column": 20,
      "context": "return parsed; } } } catch (error) { logger.error('Failed to load analytics configuration:', error); } return { ...DEFAULT"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save analytics configuration:",
      "line": 426,
      "column": 20,
      "context": "(${configStr.length} bytes)`); } } catch (error) { logger.error('Failed to save analytics configuration:', error); } } /** * Debou"
    },
    {
      "file": "src/lib/analyticsConfigOverride.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Applying development analytics configuration for better pattern detection",
      "line": 9,
      "column": 15,
      "context": "less data */ export function applyDevelopmentAnalyticsConfig() { logger.info('Applying development analytics configuration for better pattern detection');"
    },
    {
      "file": "src/lib/analyticsConfigOverride.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to apply development analytics config (non-fatal):",
      "line": 70,
      "column": 18,
      "context": "ANALYSIS_PERIOD_DAYS: 30, }, }); } catch (error) { logger.error('Failed to apply development analytics config (non-fatal):', error); } } // A"
    },
    {
      "file": "src/lib/analyticsExport.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error adding chart to PDF:",
      "line": 261,
      "column": 24,
      "context": "urrentY, imgWidth, imgHeight); } catch (error) { logger.error('Error adding chart to PDF:', error); } } } // Save the P"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] mock data seed failed",
      "line": 53,
      "column": 24,
      "context": "rackingEntry(entry); } } catch (err) { logger.error('[analyticsManager] mock data seed failed', { error: err }); } }"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] ensureUniversalAnalyticsInitialization failed",
      "line": 99,
      "column": 18,
      "context": "{ /* noop */ } } } } catch (e) { logger.error('[analyticsManager] ensureUniversalAnalyticsInitialization failed', e); } };"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading analytics profiles:",
      "line": 190,
      "column": 18,
      "context": "zedAt) : null, }); } }); } catch (error) { logger.error(\"Error loading analytics profiles:\", error); } return profiles; } /** * Ca"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] initializeStudentAnalytics failed",
      "line": 466,
      "column": 20,
      "context": "); this.saveAnalyticsProfiles(); } catch (error) { logger.error('[analyticsManager] initializeStudentAnalytics failed', { error, studentId });"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] triggerAnalyticsForStudent failed",
      "line": 669,
      "column": 20,
      "context": "ait this.getStudentAnalytics(student); } catch (error) { logger.error('[analyticsManager] triggerAnalyticsForStudent failed', { error, studentId: stud"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error saving analytics profiles:",
      "line": 741,
      "column": 20,
      "context": "files', JSON.stringify(data)); } } catch (error) { logger.error('Error saving analytics profiles:', error); // fail-soft } } } expo"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing emotion patterns",
      "line": 51,
      "column": 24,
      "context": "patterns.push(...emotionPatterns); } catch (e) { logger.error('Fallback: Error analyzing emotion patterns', e); } } await"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing sensory patterns",
      "line": 62,
      "column": 24,
      "context": "patterns.push(...sensoryPatterns); } catch (e) { logger.error('Fallback: Error analyzing sensory patterns', e); } } await"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing correlations",
      "line": 74,
      "column": 24,
      "context": "populate environmentalCorrelations } catch (e) { logger.error('Fallback: Error analyzing correlations', e); } } await new"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error generating predictive insights",
      "line": 91,
      "column": 24,
      "context": "tiveInsights = predictiveInsights; } catch (e) { logger.error('Fallback: Error generating predictive insights', e); } await n"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error detecting anomalies",
      "line": 104,
      "column": 24,
      "context": "results.anomalies = anomalies; } catch (e) { logger.error('Fallback: Error detecting anomalies', e); } } // Generate"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback analytics failed",
      "line": 121,
      "column": 20,
      "context": "); } resolve(results); } catch (error) { logger.error('Fallback analytics failed', error); reject(error instanceof Error ? error"
    },
    {
      "file": "src/lib/chartUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid chart data row:",
      "line": 125,
      "column": 20,
      "context": "turn ChartEmotionRowSchema.parse(row); } catch (error) { logger.error('Invalid chart data row:', row, error); // Return a safe default if valida"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse student data from localStorage",
      "line": 402,
      "column": 20,
      "context": "}; } return null; } catch (error) { logger.error('Failed to parse student data from localStorage', error); return null;"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse tracking entries from localStorage",
      "line": 471,
      "column": 9,
      "context": "e() - a.timestamp.getTime()); } catch (error) { logger.error( 'Failed to parse tracking entries from localStorage', error );"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error deleting student:",
      "line": 789,
      "column": 20,
      "context": "this.saveStorageIndex(); } catch (error) { logger.error('Error deleting student:', error); throw error; } } } // Export sin"
    },
    {
      "file": "src/lib/diagnostics.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[DIAGNOSTIC] Worker Timeout!",
      "line": 119,
      "column": 18,
      "context": "timeout: number) { if (!this.diagnosticMode) return; logger.error('[DIAGNOSTIC] Worker Timeout!', { workerName, timeout, timesta"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to initialize ML models:",
      "line": 79,
      "column": 20,
      "context": "this.mlModelsInitialized = true; } catch (error) { logger.error('Failed to initialize ML models:', error); this.mlModelsInitialized = fals"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "ML emotion prediction failed:",
      "line": 157,
      "column": 22,
      "context": "}); } } } catch (error) { logger.error('ML emotion prediction failed:', error); } } // Statistical senso"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "ML sensory prediction failed:",
      "line": 222,
      "column": 22,
      "context": "}); } } } catch (error) { logger.error('ML sensory prediction failed:', error); } } // Goal achievement"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Baseline clustering failed:",
      "line": 803,
      "column": 20,
      "context": "ingEntries, 3); return clusters; } catch (error) { logger.error('Baseline clustering failed:', error); return []; } } } export cons"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in custom error handler",
      "line": 93,
      "column": 22,
      "context": "onError(appError); } catch (callbackError) { logger.error('Error in custom error handler', callbackError); } } // Process e"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Critical error occurred",
      "line": 165,
      "column": 22,
      "context": "rorType.DATA_CORRUPTED: case ErrorType.UNAUTHORIZED: logger.error('Critical error occurred', logData); break; case ErrorType.NETWORK"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Application error",
      "line": 172,
      "column": 22,
      "context": "k error occurred', logData); break; default: logger.error('Application error', logData); } } /** * Show user-friendly error to"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Issue resolved",
      "line": 234,
      "column": 23,
      "context": "ies) { try { await strategy.recover(error); toast.success('Issue resolved', { description: 'The application has recovered from t"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Issue resolved",
      "line": 234,
      "column": 23,
      "context": "ies) { try { await strategy.recover(error); toast.success('Issue resolved', { description: 'The application has recovered from t"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Recovery strategy failed",
      "line": 239,
      "column": 22,
      "context": "}); return true; } catch (recoveryError) { logger.error('Recovery strategy failed', { strategy, originalError: error"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid emotion entry:",
      "line": 55,
      "column": 18,
      "context": "alidateEmotionEntry(entry); if (!validationResult.isValid) { logger.error('Generated invalid emotion entry:', entry, validationResult.errors); throw n"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid sensory entry:",
      "line": 87,
      "column": 18,
      "context": "alidateSensoryEntry(entry); if (!validationResult.isValid) { logger.error('Generated invalid sensory entry:', entry, validationResult.errors); throw n"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load mock data:",
      "line": 339,
      "column": 18,
      "context": "aStorage.saveTrackingEntry(entry); }); } catch (error) { logger.error('Failed to load mock data:', error); throw new Error('Failed to initialize m"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear mock data:",
      "line": 360,
      "column": 18,
      "context": "=> dataStorage.saveTrackingEntry(entry)); } catch (error) { logger.error('Failed to clear mock data:', error); throw new Error('Failed to clear mock"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Full mock data seeded successfully",
      "line": 59,
      "column": 17,
      "context": "to save mock tracking entry: ${entry.id}`); } } logger.info('Full mock data seeded successfully', { students: studentCount, entries: entryCo"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to seed full mock data",
      "line": 63,
      "column": 18,
      "context": "ents: studentCount, entries: entryCount }; } catch (error) { logger.error('Failed to seed full mock data', error); throw new Error('Failed to seed ful"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Minimal demo data seeded successfully",
      "line": 165,
      "column": 17,
      "context": "to save demo tracking entry: ${entry.id}`); } } logger.info('Minimal demo data seeded successfully', { studentId: finalStudentId,"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to seed minimal demo data",
      "line": 170,
      "column": 18,
      "context": "entriesCount: entries.length }); } catch (error) { logger.error('Failed to seed minimal demo data', error); throw new Error('Failed to seed"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Mock data cleared successfully",
      "line": 218,
      "column": 17,
      "context": "es.forEach(entry => dataStorage.saveTrackingEntry(entry)); logger.info('Mock data cleared successfully', { keysRemoved: keysToRemove.length }); } cat"
    },
    {
      "file": "src/lib/mockDataSeeder.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear mock data",
      "line": 220,
      "column": 18,
      "context": "y', { keysRemoved: keysToRemove.length }); } catch (error) { logger.error('Failed to clear mock data', error); throw new Error('Failed to clear mock d"
    },
    {
      "file": "src/lib/storageUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error clearing old data:",
      "line": 55,
      "column": 20,
      "context": "ON.stringify(filteredAlerts)); } } catch (error) { logger.error('Error clearing old data:', error); } }, /** * Compress data before"
    },
    {
      "file": "src/lib/storageUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "storageUtils.safeSetItem failed after cleanup",
      "line": 98,
      "column": 26,
      "context": "// If it STILL fails, log and return false logger.error('storageUtils.safeSetItem failed after cleanup', { key, error: finalErr });"
    },
    {
      "file": "src/lib/storageUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "storageUtils.safeSetItem failed with non-quota error",
      "line": 104,
      "column": 22,
      "context": "} else { // Non-quota error: log and return false logger.error('storageUtils.safeSetItem failed with non-quota error', { key, error: e });"
    },
    {
      "file": "src/lib/universalAnalyticsInitializer.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error initializing universal analytics:",
      "line": 41,
      "column": 20,
      "context": "this.initialized = true; } catch (error) { logger.error('Error initializing universal analytics:', error); } } /** * Ensure"
    },
    {
      "file": "src/lib/universalAnalyticsInitializer.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Auto-initialization failed:",
      "line": 97,
      "column": 92,
      "context": "alyticsInitializer.initializeUniversalAnalytics().catch((error) => logger.error('Auto-initialization failed:', error));"
    },
    {
      "file": "src/lib/utils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "downloadBlob called in a non-browser environment",
      "line": 28,
      "column": 18,
      "context": "f window === 'undefined' || typeof document === 'undefined') { logger.error('downloadBlob called in a non-browser environment'); return; } const sa"
    },
    {
      "file": "src/lib/utils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "downloadBlob failed",
      "line": 46,
      "column": 18,
      "context": "lick(); document.body.removeChild(link); } catch (err) { logger.error('downloadBlob failed', err); } finally { if (url) { // Defer revocat"
    },
    {
      "file": "src/hooks/useAnalyticsStatus.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading analytics status:",
      "line": 63,
      "column": 20,
      "context": "setAnalyticsStatus(status); } } catch (error) { logger.error('Error loading analytics status:', error); setAnalyticsStatus([]); } f"
    },
    {
      "file": "src/hooks/useAnalyticsStatus.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error triggering analytics:",
      "line": 93,
      "column": 20,
      "context": "s(); } await loadStatus(); } catch (error) { logger.error('Error triggering analytics:', error); } }, [loadStatus]); useEffect(()"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Worker error",
      "line": 134,
      "column": 24,
      "context": "return; } if (msg.type === 'error') { logger.error('[useAnalyticsWorker] Worker error', msg.error); setError(msg.error ||"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Worker runtime error, switching to fallback",
      "line": 197,
      "column": 22,
      "context": "ures worker.onerror = async (error: ErrorEvent) => { logger.error('[useAnalyticsWorker] Worker runtime error, switching to fallback', error);"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[useAnalyticsWorker] Analytics worker initialized successfully",
      "line": 219,
      "column": 19,
      "context": "back // since workerRef.current is now null }; logger.info('[useAnalyticsWorker] Analytics worker initialized successfully'); } catch ("
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Failed to initialize worker",
      "line": 222,
      "column": 20,
      "context": "// If worker initialization fails, log and use fallback mode logger.error('[useAnalyticsWorker] Failed to initialize worker', error); workerRef.curr"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback failed",
      "line": 308,
      "column": 22,
      "context": "ache.set(cacheKey, results, tags); } catch (error) { logger.error('[useAnalyticsWorker] Fallback failed', error); setError('Analytics proc"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] watchdog timeout: worker did not respond, attempting fallback",
      "line": 343,
      "column": 22,
      "context": "watchdogRef.current = setTimeout(async () => { try { logger.error('[useAnalyticsWorker] watchdog timeout: worker did not respond, attempting fallb"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback failed after watchdog timeout",
      "line": 363,
      "column": 22,
      "context": "ed using fallback mode.'); } catch (fallbackError) { logger.error('[useAnalyticsWorker] Fallback failed after watchdog timeout', fallbackError);"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[WORKER_MESSAGE] Failed to post message to worker, falling back to sync",
      "line": 410,
      "column": 20,
      "context": "current.postMessage(messagePayload); } catch (postErr) { logger.error('[WORKER_MESSAGE] Failed to post message to worker, falling back to sync', { err"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback processing failed after worker post error",
      "line": 424,
      "column": 22,
      "context": "); setError(null); } catch (fallbackError) { logger.error('[useAnalyticsWorker] Fallback processing failed after worker post error', fallb"
    },
    {
      "file": "src/hooks/useChartStore.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "setOption failed",
      "line": 52,
      "column": 24,
      "context": "{ type: 'chart/setOption', id }); } catch (e) { logger.error('setOption failed', e); } }, setError: (id, error) => {"
    },
    {
      "file": "src/hooks/useDataAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Pattern analysis failed in useDataAnalysis hook",
      "line": 57,
      "column": 22,
      "context": "rrelationMatrix(matrix); } } catch (error) { logger.error('Pattern analysis failed in useDataAnalysis hook', { error }); } finally {"
    },
    {
      "file": "src/hooks/useFilteredData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "useFilteredData failed",
      "line": 124,
      "column": 20,
      "context": "ackingEntries: parsedTracking }; } catch (error) { logger.error(\"useFilteredData failed\", { error }); return { emotions: [], sensoryInputs"
    },
    {
      "file": "src/hooks/useMLTrainingWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save trained model:",
      "line": 71,
      "column": 24,
      "context": "progress: 100 }); } catch (error) { logger.error('Failed to save trained model:', error); setTrainingStatus({"
    },
    {
      "file": "src/hooks/useMLTrainingWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "ML training worker error:",
      "line": 86,
      "column": 20,
      "context": "}); } }; worker.onerror = (error) => { logger.error('ML training worker error:', error); setTrainingStatus({ isTrainin"
    },
    {
      "file": "src/hooks/useProgressiveChartData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useProgressiveChartData] Failed computing emotion distribution",
      "line": 105,
      "column": 22,
      "context": "rkStepDone('emotionDistribution'); } catch (error) { logger.error('[useProgressiveChartData] Failed computing emotion distribution', error);"
    },
    {
      "file": "src/hooks/useProgressiveChartData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useProgressiveChartData] Failed computing sensory responses",
      "line": 127,
      "column": 24,
      "context": "kStepDone('sensoryResponses'); } catch (error) { logger.error('[useProgressiveChartData] Failed computing sensory responses', error);"
    },
    {
      "file": "src/hooks/useProgressiveChartData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useProgressiveChartData] Failed computing emotion trends",
      "line": 165,
      "column": 24,
      "context": "markStepDone('emotionTrends'); } catch (error) { logger.error('[useProgressiveChartData] Failed computing emotion trends', error); s"
    },
    {
      "file": "src/hooks/useRealtimeData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Real-time data connection would be established here",
      "line": 255,
      "column": 21,
      "context": "simulateDataStream, options.updateInterval); } else { logger.info('Real-time data connection would be established here'); } //"
    },
    {
      "file": "src/hooks/useStudentData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load student data:",
      "line": 79,
      "column": 20,
      "context": "catch (e) { setError('Failed to load student data.'); logger.error('Failed to load student data:', e); } finally { setIsLoading(false);"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced Filters",
      "line": 194,
      "column": 13,
      "context": "lex items-center gap-2\"> <Filter className=\"h-5 w-5\" /> Advanced Filters {activeFilters > 0 && ( <Badge varian"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "active",
      "line": 196,
      "column": 56,
      "context": "{activeFilters > 0 && ( <Badge variant=\"default\">{activeFilters} active</Badge> )} </CardTitle> <div className=\"f"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reset",
      "line": 207,
      "column": 15,
      "context": "> <RotateCcw className=\"h-4 w-4 mr-1\" /> Reset </Button> {criteria.realtime && ( <B"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Real-time",
      "line": 211,
      "column": 17,
      "context": "<Badge variant=\"default\" className=\"animate-pulse\"> Real-time </Badge> )} </div> </div>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Filters",
      "line": 220,
      "column": 42,
      "context": "t className=\"grid w-full grid-cols-3\"> <TabsTrigger value=\"filters\">Filters</TabsTrigger> <TabsTrigger value=\"presets\">Presets</TabsTrig"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Presets",
      "line": 221,
      "column": 42,
      "context": "value=\"filters\">Filters</TabsTrigger> <TabsTrigger value=\"presets\">Presets</TabsTrigger> <TabsTrigger value=\"saved\">Saved ({savedFilter"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Saved (",
      "line": 222,
      "column": 40,
      "context": "er value=\"presets\">Presets</TabsTrigger> <TabsTrigger value=\"saved\">Saved ({savedFilters.length})</TabsTrigger> </TabsList> <Ta"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Date Range",
      "line": 232,
      "column": 21,
      "context": "\"> <CalendarIcon className=\"h-4 w-4\" /> Date Range {(criteria.dateRange.start || criteria.dateRange."
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 234,
      "column": 50,
      "context": "| criteria.dateRange.end) && ( <Badge variant=\"secondary\">Active</Badge> )} </div> <"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start Date",
      "line": 241,
      "column": 30,
      "context": "grid grid-cols-2 gap-4\"> <div> <Label>Start Date</Label> <Popover> <Popo"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date",
      "line": 255,
      "column": 37,
      "context": "t, \"PPP\") ) : ( <span>Pick a date</span> )} </Bu"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "End Date",
      "line": 272,
      "column": 30,
      "context": "</div> <div> <Label>End Date</Label> <Popover> <Popove"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date",
      "line": 286,
      "column": 37,
      "context": "d, \"PPP\") ) : ( <span>Pick a date</span> )} </Bu"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 7 days",
      "line": 311,
      "column": 23,
      "context": "Date() } })} > Last 7 days </Button> <Button"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 30 days",
      "line": 320,
      "column": 23,
      "context": "Date() } })} > Last 30 days </Button> </div>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 331,
      "column": 21,
      "context": "r gap-2\"> <Brain className=\"h-4 w-4\" /> Emotions {(criteria.emotions.types.length > 0 ||"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 335,
      "column": 50,
      "context": "s.intensityRange[1] < 10) && ( <Badge variant=\"secondary\">Active</Badge> )} </div> <"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotion Types",
      "line": 341,
      "column": 28,
      "context": "ntent className=\"space-y-4\"> <div> <Label>Emotion Types</Label> <div className=\"grid grid-cols-2 gap-2"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity Range:",
      "line": 369,
      "column": 28,
      "context": "v> </div> <div> <Label>Intensity Range: {criteria.emotions.intensityRange[0]} - {criteria.emotions.inte"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Include Triggers",
      "line": 383,
      "column": 28,
      "context": "/> </div> <div> <Label>Include Triggers</Label> <Select value"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Select triggers to include",
      "line": 394,
      "column": 50,
      "context": "<SelectTrigger> <SelectValue placeholder=\"Select triggers to include\" /> </SelectTrigger>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 413,
      "column": 21,
      "context": "ter gap-2\"> <Eye className=\"h-4 w-4\" /> Sensory {(criteria.sensory.types.length > 0 ||"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 416,
      "column": 50,
      "context": "ory.responses.length > 0) && ( <Badge variant=\"secondary\">Active</Badge> )} </div> <"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory Types",
      "line": 422,
      "column": 28,
      "context": "ntent className=\"space-y-4\"> <div> <Label>Sensory Types</Label> <div className=\"grid grid-cols-2 gap-2"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Responses",
      "line": 450,
      "column": 28,
      "context": "v> </div> <div> <Label>Responses</Label> <div className=\"grid grid-cols-2 gap-2 mt-"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity Range:",
      "line": 478,
      "column": 28,
      "context": "v> </div> <div> <Label>Intensity Range: {criteria.sensory.intensityRange[0]} - {criteria.sensory.intens"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental",
      "line": 498,
      "column": 21,
      "context": "2\"> <Thermometer className=\"h-4 w-4\" /> Environmental {(criteria.environmental.locations.length > 0"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 501,
      "column": 50,
      "context": "al.activities.length > 0) && ( <Badge variant=\"secondary\">Active</Badge> )} </div> <"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Locations",
      "line": 507,
      "column": 28,
      "context": "ntent className=\"space-y-4\"> <div> <Label>Locations</Label> <div className=\"grid grid-cols-2 gap-2 mt-"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Weather Conditions",
      "line": 535,
      "column": 28,
      "context": "v> </div> <div> <Label>Weather Conditions</Label> <div className=\"grid grid-cols-2"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Noise Level:",
      "line": 563,
      "column": 28,
      "context": "v> </div> <div> <Label>Noise Level: {criteria.environmental.conditions.noiseLevel[0]} - {criteria.envir"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Patterns & Analysis",
      "line": 589,
      "column": 21,
      "context": "r gap-2\"> <Clock className=\"h-4 w-4\" /> Patterns & Analysis {(criteria.patterns.anomaliesOnly ||"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 592,
      "column": 50,
      "context": "tterns.minConfidence > 0) && ( <Badge variant=\"secondary\">Active</Badge> )} </div> <"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Show anomalies only",
      "line": 605,
      "column": 48,
      "context": "})} /> <Label htmlFor=\"anomalies\">Show anomalies only</Label> </div> <div>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Minimum Confidence:",
      "line": 609,
      "column": 28,
      "context": "l> </div> <div> <Label>Minimum Confidence: {criteria.patterns.minConfidence}%</Label>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Types",
      "line": 623,
      "column": 28,
      "context": "/> </div> <div> <Label>Pattern Types</Label> <div className=\"grid grid-cols-2 gap-2"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Real-time Updates",
      "line": 657,
      "column": 43,
      "context": "<Clock className=\"h-4 w-4\" /> <Label htmlFor=\"realtime\">Real-time Updates</Label> </div> <Switch"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Filter name...",
      "line": 692,
      "column": 31,
      "context": "<input type=\"text\" placeholder=\"Filter name...\" value={filterName} onChange"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save Current",
      "line": 699,
      "column": 19,
      "context": "terName}> <Save className=\"h-4 w-4 mr-1\" /> Save Current </Button> </div> )}"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No saved filters yet",
      "line": 707,
      "column": 20,
      "context": "<Filter className=\"h-12 w-12 mx-auto mb-4 opacity-50\" /> <p>No saved filters yet</p> <p className=\"text-sm\">Save your curren"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save your current filter configuration for quick access",
      "line": 708,
      "column": 40,
      "context": "<p>No saved filters yet</p> <p className=\"text-sm\">Save your current filter configuration for quick access</p> </div>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "filters configured",
      "line": 722,
      "column": 39,
      "context": "gify(criteria[k as keyof FilterCriteria]) ).length} filters configured </p> </div>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Apply",
      "line": 734,
      "column": 29,
      "context": "}} > Apply </Button> {onDeleteFil"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "students,",
      "line": 463,
      "column": 93,
      "context": "{String(tCommon('interface.results'))}: {filteredResults.students.length} students, {filteredResults.emotions.length} emotions, {filteredResults.sensoryIn"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions,",
      "line": 463,
      "column": 137,
      "context": ": {filteredResults.students.length} students, {filteredResults.emotions.length} emotions, {filteredResults.sensoryInputs.length} sensory inputs, {filteredResult"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sensory inputs,",
      "line": 463,
      "column": 186,
      "context": "lteredResults.emotions.length} emotions, {filteredResults.sensoryInputs.length} sensory inputs, {filteredResults.goals.length} goals </span>"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals",
      "line": 463,
      "column": 233,
      "context": "redResults.sensoryInputs.length} sensory inputs, {filteredResults.goals.length} goals </span> {activeFiltersCount > 0 && ("
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Alert marked as viewed",
      "line": 54,
      "column": 19,
      "context": "alertSystem.markAlertAsViewed(alertId); loadAlerts(); toast.success('Alert marked as viewed'); }; /** * Handle alert resolution with proper"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Alert marked as viewed",
      "line": 54,
      "column": 19,
      "context": "alertSystem.markAlertAsViewed(alertId); loadAlerts(); toast.success('Alert marked as viewed'); }; /** * Handle alert resolution with proper"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Alert resolved successfully",
      "line": 77,
      "column": 21,
      "context": "Alert(null); setResolveNotes(''); loadAlerts(); toast.success('Alert resolved successfully'); } catch (error) { logger.error('Failed"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Alert resolved successfully",
      "line": 77,
      "column": 21,
      "context": "Alert(null); setResolveNotes(''); loadAlerts(); toast.success('Alert resolved successfully'); } catch (error) { logger.error('Failed"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to resolve alert",
      "line": 79,
      "column": 20,
      "context": "uccess('Alert resolved successfully'); } catch (error) { logger.error('Failed to resolve alert', error); toast.error('Failed to resolve alert. P"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to resolve alert. Please try again.",
      "line": 80,
      "column": 19,
      "context": "rror) { logger.error('Failed to resolve alert', error); toast.error('Failed to resolve alert. Please try again.'); } finally { setIsResolv"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to resolve alert. Please try again.",
      "line": 80,
      "column": 19,
      "context": "rror) { logger.error('Failed to resolve alert', error); toast.error('Failed to resolve alert. Please try again.'); } finally { setIsResolv"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "data points",
      "line": 154,
      "column": 57,
      "context": "aleDateString()}</span> <span>{alertEntry.alert.dataPoints} data points</span> {alertEntry.resolved && ("
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolved",
      "line": 157,
      "column": 25,
      "context": "<Badge variant=\"outline\" className=\"text-green-600\"> Resolved </Badge> )}"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolve",
      "line": 190,
      "column": 25,
      "context": "size=\"sm\" > Resolve </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolve Alert",
      "line": 195,
      "column": 38,
      "context": "tent> <DialogHeader> <DialogTitle>Resolve Alert</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert Details",
      "line": 199,
      "column": 60,
      "context": "<div> <h4 className=\"font-medium mb-2\">Alert Details</h4> <p className=\"text-sm text-muted-fo"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 206,
      "column": 72,
      "context": "<div> <h5 className=\"text-sm font-medium mb-2\">Recommendations:</h5> <ul className=\"text-sm text-"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 210,
      "column": 68,
      "context": "tart gap-2\"> <span className=\"text-primary\">•</span> <span>{rec}</span>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolution Notes (Optional)",
      "line": 221,
      "column": 29,
      "context": "<label className=\"text-sm font-medium mb-2 block\"> Resolution Notes (Optional) </label>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Describe actions taken or observations...",
      "line": 226,
      "column": 41,
      "context": "(e) => setResolveNotes(e.target.value)} placeholder=\"Describe actions taken or observations...\" rows={3}"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 233,
      "column": 29,
      "context": "t=\"outline\" onClick={() => setSelectedAlert(null)}> Cancel </Button> <Button"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommended Actions:",
      "line": 254,
      "column": 19,
      "context": "<h4 className=\"text-sm font-medium mb-2 text-foreground\"> Recommended Actions: </h4> <ul className=\"text-s"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 259,
      "column": 54,
      "context": "=\"flex items-start gap-2\"> <span className=\"text-primary\">•</span> <span>{recommendation}</span>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolution Notes:",
      "line": 269,
      "column": 21,
      "context": "<h5 className=\"text-sm font-medium text-green-800 mb-1\"> Resolution Notes: </h5> <p className=\"text-s"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Resolved by",
      "line": 273,
      "column": 21,
      "context": "<p className=\"text-xs text-green-600 mt-1\"> Resolved by {alertEntry.resolvedBy} on {alertEntry.resolvedAt?.toLocaleDateStrin"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "on",
      "line": 273,
      "column": 57,
      "context": "s text-green-600 mt-1\"> Resolved by {alertEntry.resolvedBy} on {alertEntry.resolvedAt?.toLocaleDateString()} </p>"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Configuration Tests",
      "line": 243,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Settings className=\"h-5 w-5\" /> Analytics Configuration Tests </CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Verify that configuration changes and cache invalidation work correctly",
      "line": 246,
      "column": 11,
      "context": "cs Configuration Tests </CardTitle> <CardDescription> Verify that configuration changes and cache invalidation work correctly"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Current Configuration",
      "line": 252,
      "column": 58,
      "context": "className=\"space-y-1\"> <p className=\"text-sm text-muted-foreground\">Current Configuration</p> <div className=\"flex gap-2\">"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert Level:",
      "line": 255,
      "column": 17,
      "context": "className=\"flex gap-2\"> <Badge variant=\"outline\"> Alert Level: {currentConfig.alertSensitivity.level} </Badge>"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Min Data Points:",
      "line": 258,
      "column": 17,
      "context": "</Badge> <Badge variant=\"outline\"> Min Data Points: {currentConfig.patternAnalysis.minDataPoints} </B"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Size:",
      "line": 261,
      "column": 17,
      "context": "</Badge> <Badge variant=\"outline\"> Cache Size: {cacheSize} </Badge> </div> </di"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Run Tests",
      "line": 267,
      "column": 13,
      "context": "items-center gap-2\"> <RefreshCw className=\"h-4 w-4\" /> Run Tests </Button> </div> {testResults.length > 0 &&"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test Results",
      "line": 273,
      "column": 49,
      "context": "<div className=\"space-y-2\"> <h4 className=\"text-sm font-medium\">Test Results</h4> {testResults.map((result, index) => ("
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Quick Actions",
      "line": 293,
      "column": 61,
      "context": "me=\"pt-4 border-t\"> <p className=\"text-sm text-muted-foreground mb-2\">Quick Actions</p> <div className=\"flex flex-wrap gap-2\"> <"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Set Conservative",
      "line": 300,
      "column": 15,
      "context": "k={() => analyticsConfig.setPreset('conservative')} > Set Conservative </Button> <Button size=\"s"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Set Sensitive",
      "line": 307,
      "column": 15,
      "context": "lick={() => analyticsConfig.setPreset('sensitive')} > Set Sensitive </Button> <Button size=\"sm\""
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reset to Defaults",
      "line": 314,
      "column": 15,
      "context": "onClick={() => analyticsConfig.resetToDefaults()} > Reset to Defaults </Button> <Button size=\""
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear Cache",
      "line": 321,
      "column": 15,
      "context": "ariant=\"outline\" onClick={clearCache} > Clear Cache </Button> </div> </div> </CardCo"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error coercing timestamp:",
      "line": 97,
      "column": 24,
      "context": "} return new Date(); } catch (error) { logger.error('Error coercing timestamp:', v, error); return new Date(); }"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error normalizing filteredData:",
      "line": 109,
      "column": 22,
      "context": "oerce(s.timestamp) })), }; } catch (error) { logger.error('Error normalizing filteredData:', error); return { entries: ["
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "PDF report exported successfully",
      "line": 184,
      "column": 25,
      "context": "await analyticsExport.exportToPDF(exportData); toast.success('PDF report exported successfully'); break; case 'csv':"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "PDF report exported successfully",
      "line": 184,
      "column": 25,
      "context": "await analyticsExport.exportToPDF(exportData); toast.success('PDF report exported successfully'); break; case 'csv':"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "CSV data exported successfully",
      "line": 188,
      "column": 25,
      "context": "sv': analyticsExport.exportToCSV(exportData); toast.success('CSV data exported successfully'); break; case 'json':"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "CSV data exported successfully",
      "line": 188,
      "column": 25,
      "context": "sv': analyticsExport.exportToCSV(exportData); toast.success('CSV data exported successfully'); break; case 'json':"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "JSON data exported successfully",
      "line": 192,
      "column": 25,
      "context": "n': analyticsExport.exportToJSON(exportData); toast.success('JSON data exported successfully'); break; } } catch (error)"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "JSON data exported successfully",
      "line": 192,
      "column": 25,
      "context": "n': analyticsExport.exportToJSON(exportData); toast.success('JSON data exported successfully'); break; } } catch (error)"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export failed:",
      "line": 196,
      "column": 20,
      "context": "ccessfully'); break; } } catch (error) { logger.error('Export failed:', error); toast.error('Failed to export analytics data');"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to export analytics data",
      "line": 197,
      "column": 19,
      "context": "catch (error) { logger.error('Export failed:', error); toast.error('Failed to export analytics data'); } finally { setIsExporting(false);"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to export analytics data",
      "line": 197,
      "column": 19,
      "context": "catch (error) { logger.error('Export failed:', error); toast.error('Failed to export analytics data'); } finally { setIsExporting(false);"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Dashboard -",
      "line": 228,
      "column": 22,
      "context": "er className=\"flex flex-row items-center justify-between\"> <CardTitle>Analytics Dashboard - {student.name}</CardTitle> <div className=\"flex"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Settings",
      "line": 236,
      "column": 15,
      "context": "> <Settings className=\"h-4 w-4 mr-2\" /> Settings </Button> <DropdownMenu> <Dropdow"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as PDF",
      "line": 251,
      "column": 19,
      "context": "> <FileText className=\"h-4 w-4 mr-2\" /> Export as PDF </DropdownMenuItem> <DropdownMenuI"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as CSV",
      "line": 258,
      "column": 19,
      "context": "<FileSpreadsheet className=\"h-4 w-4 mr-2\" /> Export as CSV </DropdownMenuItem> <DropdownMenuI"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as JSON",
      "line": 265,
      "column": 19,
      "context": "> <FileJson className=\"h-4 w-4 mr-2\" /> Export as JSON </DropdownMenuItem> </DropdownMenuC"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Total Sessions",
      "line": 279,
      "column": 74,
      "context": "<div> <p className=\"text-sm font-medium text-muted-foreground\">Total Sessions</p> <p className=\"text-2xl font-bold\">{filteredDa"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Patterns Found",
      "line": 315,
      "column": 74,
      "context": "<div> <p className=\"text-sm font-medium text-muted-foreground\">Patterns Found</p> <p className=\"text-2xl font-bold\">{patterns.l"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Charts tab",
      "line": 327,
      "column": 58,
      "context": "d w-full grid-cols-4\"> <TabsTrigger value=\"visualizations\" aria-label=\"Charts tab\">Charts</TabsTrigger> <TabsTrigger value=\"patterns\">Patter"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Charts",
      "line": 327,
      "column": 71,
      "context": "-cols-4\"> <TabsTrigger value=\"visualizations\" aria-label=\"Charts tab\">Charts</TabsTrigger> <TabsTrigger value=\"patterns\">Patterns</TabsTrigg"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Patterns",
      "line": 328,
      "column": 41,
      "context": "label=\"Charts tab\">Charts</TabsTrigger> <TabsTrigger value=\"patterns\">Patterns</TabsTrigger> <TabsTrigger value=\"correlations\" data-testid=\""
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlations",
      "line": 329,
      "column": 86,
      "context": "<TabsTrigger value=\"correlations\" data-testid=\"dashboard-correlations-tab\">Correlations</TabsTrigger> <TabsTrigger value=\"alerts\">Alerts</TabsTri"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alerts",
      "line": 330,
      "column": 39,
      "context": "relations-tab\">Correlations</TabsTrigger> <TabsTrigger value=\"alerts\">Alerts</TabsTrigger> </TabsList> <TabsContent value=\"visualizat"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading visualization",
      "line": 335,
      "column": 111,
      "context": "={<div className=\"h-[360px] rounded-xl border bg-card animate-pulse\" aria-label=\"Loading visualization\" /> }> <LazyInteractiveDataVisualization"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Behavioral Patterns",
      "line": 349,
      "column": 26,
      "context": "lassName=\"flex flex-row items-center justify-between\"> <CardTitle>Behavioral Patterns</CardTitle> <Button variant=\""
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analyzing data...",
      "line": 363,
      "column": 23,
      "context": "sName=\"h-12 w-12 mx-auto mb-4 animate-spin opacity-50\" /> <p>Analyzing data...</p> </div> )} {!i"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No significant patterns detected yet.",
      "line": 374,
      "column": 22,
      "context": "<Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" /> <p>No significant patterns detected yet.</p> <p className=\"text-s"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "More data may be needed for pattern analysis.",
      "line": 375,
      "column": 42,
      "context": "significant patterns detected yet.</p> <p className=\"text-sm\">More data may be needed for pattern analysis.</p> </div>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Vis forklaringen",
      "line": 396,
      "column": 48,
      "context": "<button aria-label=\"Vis forklaringen\" className=\"inline-flex it"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis forklaringen",
      "line": 400,
      "column": 37,
      "context": "<Info className=\"h-3 w-3\" /> Vis forklaringen </button>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hva betyr dette mønsteret?",
      "line": 404,
      "column": 67,
      "context": "ing-relaxed\"> <p className=\"mb-1 font-medium\">Hva betyr dette mønsteret?</p> <p className=\"t"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tolk alltid sammen med kontekst og pedagogisk vurdering.",
      "line": 409,
      "column": 37,
      "context": "me=\"mt-2 text-xs text-muted-foreground/80\"> Tolk alltid sammen med kontekst og pedagogisk vurdering."
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 419,
      "column": 76,
      "context": "-3\"> <h5 className=\"text-sm font-medium mb-2\">Recommendations:</h5> <ul className=\"text-sm t"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 423,
      "column": 72,
      "context": "gap-2\"> <span className=\"text-primary\">•</span> <span>{rec}</span>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% confidence",
      "line": 434,
      "column": 69,
      "context": "nfidence)}> {Math.round(pattern.confidence * 100)}% confidence </Badge> <p"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "data points",
      "line": 437,
      "column": 52,
      "context": "text-muted-foreground mt-1\"> {pattern.dataPoints} data points </p> </div>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI-Generated Insights",
      "line": 452,
      "column": 26,
      "context": "Section */} <Card> <CardHeader> <CardTitle>AI-Generated Insights</CardTitle> </CardHeader> <CardCon"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Generating insights...",
      "line": 455,
      "column": 68,
      "context": "CardContent> {isAnalyzing && <p className=\"text-muted-foreground\">Generating insights...</p>} {!isAnalyzing && insights.length === 0"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No insights available yet.",
      "line": 457,
      "column": 54,
      "context": "insights.length === 0 && ( <p className=\"text-muted-foreground\">No insights available yet.</p> )} {!isAnalyzing && i"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation Heatmap",
      "line": 476,
      "column": 75,
      "context": "<div> <CardTitle data-testid=\"environmental-correlations-title\">Correlation Heatmap</CardTitle> <p className=\"text-sm text-muted"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Strength of relationships between tracked factors (−1 to 1)",
      "line": 477,
      "column": 62,
      "context": "eatmap</CardTitle> <p className=\"text-sm text-muted-foreground\">Strength of relationships between tracked factors (−1 to 1)</p> </"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Hvordan lese varmekartet",
      "line": 481,
      "column": 38,
      "context": "<HoverCardTrigger asChild> <button aria-label=\"Hvordan lese varmekartet\" className=\"inline-flex items-center gap-2 rounded-ful"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hvordan lese varmekartet",
      "line": 483,
      "column": 21,
      "context": "ccent/30\"> <Info className=\"h-4 w-4\" /> Hvordan lese varmekartet </button> </HoverCard"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Farger viser korrelasjon: grønn = positiv sammenheng, rød = negativ. Tall nær 1 eller −1 betyr sterkere samband.\n                    Akser viser faktorer. Hold musepekeren over en celle for detaljer og signifikans.",
      "line": 488,
      "column": 21,
      "context": "sName=\"w-80 text-sm leading-relaxed\"> <p> Farger viser korrelasjon: grønn = positiv sammenheng, rød = negativ. Tall nær 1"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analyzing correlations...",
      "line": 498,
      "column": 22,
      "context": "ssName=\"h-12 w-12 mx-auto mb-4 animate-spin opacity-50\" /> <p>Analyzing correlations...</p> </div> )}"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Negativ",
      "line": 518,
      "column": 33,
      "context": "ms-center gap-3 text-xs text-muted-foreground\"> <span>Negativ</span> <span className=\"h-3 w-3 rounded\" style"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Positiv",
      "line": 522,
      "column": 33,
      "context": "rder\" style={{ backgroundColor: '#f3f4f6' }} /> <span>Positiv</span> <span className=\"h-3 w-3 rounded\" style"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No significant correlations found.",
      "line": 535,
      "column": 26,
      "context": "hart3 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" /> <p>No significant correlations found.</p> <p className=\"text-"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "More varied environmental data may be needed.",
      "line": 536,
      "column": 46,
      "context": "ignificant correlations found.</p> <p className=\"text-sm\">More varied environmental data may be needed.</p> </div>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 548,
      "column": 55,
      "context": "-medium text-foreground\"> {correlation.factor1} ↔ {correlation.factor2} </h4>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "significance",
      "line": 556,
      "column": 60,
      "context": "fault' : 'outline'}> {correlation.significance} significance </Badge>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "r =",
      "line": 559,
      "column": 33,
      "context": "className=\"text-xs text-muted-foreground mt-1\"> r = {typeof (correlation as CorrelationResult & {correlation?: number}).correlat"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error comparing timestamps in AnalyticsDashboard memo:",
      "line": 619,
      "column": 23,
      "context": "return prevTime === nextTime; } catch (error) { logger.error('Error comparing timestamps in AnalyticsDashboard memo:', error); retur"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load ML model status",
      "line": 73,
      "column": 20,
      "context": "tatus(); setModelStatus(status); } catch (error) { logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load ML models: Could not retrieve model status. Some features may be unavailable.",
      "line": 74,
      "column": 19,
      "context": "logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load ML models: Could not retrieve model status. Some features may be"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to load ML models: Could not retrieve model status. Some features may be unavailable.",
      "line": 74,
      "column": 19,
      "context": "logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load ML models: Could not retrieve model status. Some features may be"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Analytics configuration has been updated",
      "line": 129,
      "column": 19,
      "context": "Config.updateConfig(config); setHasUnsavedChanges(false); toast.success(\"Analytics configuration has been updated\"); }; const handleReset = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Analytics configuration has been updated",
      "line": 129,
      "column": 19,
      "context": "Config.updateConfig(config); setHasUnsavedChanges(false); toast.success(\"Analytics configuration has been updated\"); }; const handleReset = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Settings have been reset to defaults",
      "line": 136,
      "column": 19,
      "context": "tSelectedPreset('balanced'); setHasUnsavedChanges(false); toast.success(\"Settings have been reset to defaults\"); }; const handleExport = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Settings have been reset to defaults",
      "line": 136,
      "column": 19,
      "context": "tSelectedPreset('balanced'); setHasUnsavedChanges(false); toast.success(\"Settings have been reset to defaults\"); }; const handleExport = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Configuration saved to analytics-config.json",
      "line": 151,
      "column": 19,
      "context": "ument.body.removeChild(a); URL.revokeObjectURL(url); toast.success(\"Configuration saved to analytics-config.json\"); }; const handleImport = (e"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Configuration saved to analytics-config.json",
      "line": 151,
      "column": 19,
      "context": "ument.body.removeChild(a); URL.revokeObjectURL(url); toast.success(\"Configuration saved to analytics-config.json\"); }; const handleImport = (e"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Successfully imported configuration",
      "line": 164,
      "column": 25,
      "context": "nfig(content)) { setHasUnsavedChanges(false); toast.success(\"Successfully imported configuration\"); } else { toast.error(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Successfully imported configuration",
      "line": 164,
      "column": 25,
      "context": "nfig(content)) { setHasUnsavedChanges(false); toast.success(\"Successfully imported configuration\"); } else { toast.error(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid configuration file",
      "line": 166,
      "column": 23,
      "context": "(\"Successfully imported configuration\"); } else { toast.error(\"Invalid configuration file\"); } } catch (_error) { toast."
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Invalid configuration file",
      "line": 166,
      "column": 23,
      "context": "(\"Successfully imported configuration\"); } else { toast.error(\"Invalid configuration file\"); } } catch (_error) { toast."
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to read configuration file",
      "line": 169,
      "column": 21,
      "context": "id configuration file\"); } } catch (_error) { toast.error(\"Failed to read configuration file\"); } }; reader.readAsText(file)"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to read configuration file",
      "line": 169,
      "column": 21,
      "context": "id configuration file\"); } } catch (_error) { toast.error(\"Failed to read configuration file\"); } }; reader.readAsText(file)"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete model",
      "line": 197,
      "column": 19,
      "context": "${modelType} model has been removed`); } catch (_error) { toast.error(\"Failed to delete model\"); } finally { setIsDeletingModel(null); }"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to delete model",
      "line": 197,
      "column": 19,
      "context": "${modelType} model has been removed`); } catch (_error) { toast.error(\"Failed to delete model\"); } finally { setIsDeletingModel(null); }"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Configuration",
      "line": 241,
      "column": 13,
      "context": "x items-center gap-2\"> <Settings className=\"h-5 w-5\" /> Analytics Configuration </DialogTitle> <DialogDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Customize analytics parameters to adjust sensitivity and thresholds",
      "line": 244,
      "column": 13,
      "context": "onfiguration </DialogTitle> <DialogDescription> Customize analytics parameters to adjust sensitivity and thresholds </"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Preset Configurations",
      "line": 252,
      "column": 46,
      "context": "<Card> <CardHeader> <CardTitle className=\"text-lg\">Preset Configurations</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Choose a preset configuration or customize your own",
      "line": 254,
      "column": 17,
      "context": "eset Configurations</CardTitle> <CardDescription> Choose a preset configuration or customize your own </CardDescript"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Conservative",
      "line": 267,
      "column": 53,
      "context": "=\"h-4 w-4 text-blue-500\" /> <span className=\"font-medium\">Conservative</span> </div> <p className="
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Higher thresholds, fewer alerts",
      "line": 270,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> Higher thresholds, fewer alerts </p> </Lab"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Balanced",
      "line": 281,
      "column": 53,
      "context": "\"h-4 w-4 text-green-500\" /> <span className=\"font-medium\">Balanced</span> </div> <p className=\"tex"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Default settings, balanced sensitivity",
      "line": 284,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> Default settings, balanced sensitivity </p>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensitive",
      "line": 295,
      "column": 53,
      "context": "h-4 w-4 text-yellow-500\" /> <span className=\"font-medium\">Sensitive</span> </div> <p className=\"te"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Lower thresholds, more alerts",
      "line": 298,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> Lower thresholds, more alerts </p> </Label"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Thresholds",
      "line": 309,
      "column": 47,
      "context": "ssName=\"grid w-full grid-cols-5\"> <TabsTrigger value=\"thresholds\">Thresholds</TabsTrigger> <TabsTrigger value=\"sensitivity\">Sensitiv"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensitivity",
      "line": 310,
      "column": 48,
      "context": "sholds\">Thresholds</TabsTrigger> <TabsTrigger value=\"sensitivity\">Sensitivity</TabsTrigger> <TabsTrigger value=\"timewindows\">Time Wi"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Time Windows",
      "line": 311,
      "column": 48,
      "context": "ivity\">Sensitivity</TabsTrigger> <TabsTrigger value=\"timewindows\">Time Windows</TabsTrigger> <TabsTrigger value=\"mlmodels\">ML Models"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ML Models",
      "line": 312,
      "column": 45,
      "context": "windows\">Time Windows</TabsTrigger> <TabsTrigger value=\"mlmodels\">ML Models</TabsTrigger> <TabsTrigger value=\"advanced\">Advanced</Ta"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced",
      "line": 313,
      "column": 45,
      "context": "=\"mlmodels\">ML Models</TabsTrigger> <TabsTrigger value=\"advanced\">Advanced</TabsTrigger> </TabsList> <TabsContent value=\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis Thresholds",
      "line": 319,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Pattern Analysis Thresholds</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Adjust minimum requirements and thresholds for pattern detection",
      "line": 321,
      "column": 21,
      "context": "Thresholds</CardTitle> <CardDescription> Adjust minimum requirements and thresholds for pattern detection"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Minimum Data Points",
      "line": 327,
      "column": 54,
      "context": "sName=\"flex items-center\"> <Label htmlFor=\"minDataPoints\">Minimum Data Points</Label> {renderTooltip(\"Minimum number"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation Threshold",
      "line": 346,
      "column": 61,
      "context": "flex items-center\"> <Label htmlFor=\"correlationThreshold\">Correlation Threshold</Label> {renderTooltip(\"Minimum corr"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Concern Frequency Threshold",
      "line": 365,
      "column": 57,
      "context": "me=\"flex items-center\"> <Label htmlFor=\"concernFrequency\">Concern Frequency Threshold</Label> {renderTooltip(\"Percen"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enhanced Analysis Thresholds",
      "line": 386,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Enhanced Analysis Thresholds</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure advanced pattern detection and anomaly thresholds",
      "line": 388,
      "column": 21,
      "context": "Thresholds</CardTitle> <CardDescription> Configure advanced pattern detection and anomaly thresholds </"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly Detection Sensitivity",
      "line": 394,
      "column": 57,
      "context": "me=\"flex items-center\"> <Label htmlFor=\"anomalyThreshold\">Anomaly Detection Sensitivity</Label> {renderTooltip(\"Numb"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "σ",
      "line": 407,
      "column": 110,
      "context": "lassName=\"w-12 text-right\">{config.enhancedAnalysis.anomalyThreshold.toFixed(2)}σ</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Minimum Sample Size",
      "line": 413,
      "column": 54,
      "context": "sName=\"flex items-center\"> <Label htmlFor=\"minSampleSize\">Minimum Sample Size</Label> {renderTooltip(\"Minimum data p"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert Sensitivity",
      "line": 436,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Alert Sensitivity</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Control how sensitive the system is to potential issues",
      "line": 438,
      "column": 21,
      "context": "Sensitivity</CardTitle> <CardDescription> Control how sensitive the system is to potential issues </Card"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Low Sensitivity",
      "line": 450,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">Low Sensitivity</p> <p className=\"text-sm text-muted-f"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Only alert for significant patterns with high confidence",
      "line": 452,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Only alert for significant patterns with high confidence"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Medium Sensitivity",
      "line": 460,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">Medium Sensitivity</p> <p className=\"text-sm text-mute"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Balanced approach to pattern detection and alerts",
      "line": 462,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Balanced approach to pattern detection and alerts </p>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "High Sensitivity",
      "line": 470,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">High Sensitivity</p> <p className=\"text-sm text-muted-"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert for subtle patterns and potential concerns early",
      "line": 472,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Alert for subtle patterns and potential concerns early"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Current Multipliers:",
      "line": 480,
      "column": 78,
      "context": "\"> <p className=\"text-sm font-medium text-muted-foreground\">Current Multipliers:</p> <div className=\"grid grid-cols-3 ga"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotion:",
      "line": 482,
      "column": 28,
      "context": "<div className=\"grid grid-cols-3 gap-2 text-sm\"> <div>Emotion: {config.alertSensitivity.emotionIntensityMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 482,
      "column": 89,
      "context": "<div>Emotion: {config.alertSensitivity.emotionIntensityMultiplier}x</div> <div>Frequency: {config.alertSensitivity.frequency"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Frequency:",
      "line": 483,
      "column": 28,
      "context": ".alertSensitivity.emotionIntensityMultiplier}x</div> <div>Frequency: {config.alertSensitivity.frequencyMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 483,
      "column": 84,
      "context": "<div>Frequency: {config.alertSensitivity.frequencyMultiplier}x</div> <div>Anomaly: {config.alertSensitivity.anomalyMult"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly:",
      "line": 484,
      "column": 28,
      "context": "{config.alertSensitivity.frequencyMultiplier}x</div> <div>Anomaly: {config.alertSensitivity.anomalyMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 484,
      "column": 80,
      "context": "<div>Anomaly: {config.alertSensitivity.anomalyMultiplier}x</div> </div> </div> </Ca"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analysis Time Windows",
      "line": 494,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Analysis Time Windows</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure the time periods used for different analyses",
      "line": 496,
      "column": 21,
      "context": "ime Windows</CardTitle> <CardDescription> Configure the time periods used for different analyses </CardD"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Default Analysis Period",
      "line": 502,
      "column": 56,
      "context": "ame=\"flex items-center\"> <Label htmlFor=\"defaultAnalysis\">Default Analysis Period</Label> {renderTooltip(\"Standard t"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 515,
      "column": 98,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.defaultAnalysisDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recent Data Window",
      "line": 521,
      "column": 51,
      "context": "lassName=\"flex items-center\"> <Label htmlFor=\"recentData\">Recent Data Window</Label> {renderTooltip(\"Time window for"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 534,
      "column": 93,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.recentDataDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Long-term Analysis Window",
      "line": 540,
      "column": 49,
      "context": "className=\"flex items-center\"> <Label htmlFor=\"longTerm\">Long-term Analysis Window</Label> {renderTooltip(\"Extended"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 553,
      "column": 91,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.longTermDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Machine Learning Models",
      "line": 566,
      "column": 23,
      "context": "p-2\"> <Brain className=\"h-4 w-4\" /> Machine Learning Models </span> <div cla"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enable ML",
      "line": 569,
      "column": 83,
      "context": "<Label htmlFor=\"ml-enabled\" className=\"text-sm font-normal\">Enable ML</Label> <Switch id=\"ml-e"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Manage AI-powered prediction models for enhanced analytics",
      "line": 578,
      "column": 21,
      "context": "</CardTitle> <CardDescription> Manage AI-powered prediction models for enhanced analytics </C"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading ML models...",
      "line": 586,
      "column": 68,
      "context": "reground\" /> <span className=\"ml-2 text-muted-foreground\">Loading ML models...</span> </div> ) : ("
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Version",
      "line": 611,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Version</p> <p className=\"font-medium\">{model.ve"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last Trained",
      "line": 615,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Last Trained</p> <p className=\"font-medium\">"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Accuracy",
      "line": 622,
      "column": 72,
      "context": "<div> <p className=\"text-muted-foreground\">Accuracy</p> <p className=\"font-medium\">{(mode"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Points",
      "line": 627,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Data Points</p> <p className=\"font-medium\">{mode"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Model Performance",
      "line": 635,
      "column": 75,
      "context": "-sm\"> <span className=\"text-muted-foreground\">Model Performance</span> <span>{(model.accurac"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Training...",
      "line": 652,
      "column": 37,
      "context": "r2 className=\"h-3 w-3 mr-1 animate-spin\" /> Training... </>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Retrain",
      "line": 657,
      "column": 37,
      "context": "<RefreshCw className=\"h-3 w-3 mr-1\" /> Retrain </> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Deleting...",
      "line": 670,
      "column": 37,
      "context": "r2 className=\"h-3 w-3 mr-1 animate-spin\" /> Deleting... </>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No model trained yet. Model will be trained automatically when sufficient data is available.",
      "line": 681,
      "column": 31,
      "context": "p className=\"text-sm text-muted-foreground mb-3\"> No model trained yet. Model will be trained automatically when sufficient data i"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Training...",
      "line": 692,
      "column": 35,
      "context": "der2 className=\"h-3 w-3 mr-1 animate-spin\" /> Training... </> )"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Train Model",
      "line": 697,
      "column": 35,
      "context": "<Brain className=\"h-3 w-3 mr-1\" /> Train Model </> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "About Machine Learning",
      "line": 711,
      "column": 23,
      "context": "ap-2\"> <Info className=\"h-4 w-4\" /> About Machine Learning </h5> <p classNam"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ML models enhance predictions by learning from historical patterns. They require:",
      "line": 714,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> ML models enhance predictions by learning from historical patterns. They require"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion prediction: 7+ days of data",
      "line": 717,
      "column": 27,
      "context": "sName=\"text-sm text-muted-foreground space-y-1 ml-4\"> <li>• Emotion prediction: 7+ days of data</li> <li>• Sensory r"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory response: 10+ tracking sessions",
      "line": 718,
      "column": 27,
      "context": "<li>• Emotion prediction: 7+ days of data</li> <li>• Sensory response: 10+ tracking sessions</li> <li>• Basel"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Baseline clustering: 10+ tracking entries",
      "line": 719,
      "column": 27,
      "context": "<li>• Sensory response: 10+ tracking sessions</li> <li>• Baseline clustering: 10+ tracking entries</li> </ul>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Models are trained locally in your browser and improve over time as more data is collected.",
      "line": 722,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> Models are trained locally in your browser and improve over time as more data is"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Settings",
      "line": 734,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Cache Settings</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure performance optimization settings",
      "line": 736,
      "column": 21,
      "context": "he Settings</CardTitle> <CardDescription> Configure performance optimization settings </CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Duration",
      "line": 742,
      "column": 49,
      "context": "className=\"flex items-center\"> <Label htmlFor=\"cacheTTL\">Cache Duration</Label> {renderTooltip(\"How long to keep ca"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "min",
      "line": 755,
      "column": 84,
      "context": "<span className=\"w-16 text-right\">{config.cache.ttl / 60000} min</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Invalidate cache on config change",
      "line": 761,
      "column": 30,
      "context": "<div className=\"flex items-center\"> <Label>Invalidate cache on config change</Label> {renderTooltip(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Import/Export Configuration",
      "line": 773,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Import/Export Configuration</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save and share your configuration settings",
      "line": 775,
      "column": 21,
      "context": "nfiguration</CardTitle> <CardDescription> Save and share your configuration settings </CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export Config",
      "line": 785,
      "column": 21,
      "context": "> <Download className=\"h-4 w-4\" /> Export Config </Button> <"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Import Config",
      "line": 796,
      "column": 25,
      "context": "<Upload className=\"h-4 w-4\" /> Import Config </span> </Button>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reset to Defaults",
      "line": 820,
      "column": 15,
      "context": "-2\" > <RotateCcw className=\"h-4 w-4\" /> Reset to Defaults </Button> <div className="
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Unsaved changes",
      "line": 827,
      "column": 19,
      "context": "r-4\"> <AlertTriangle className=\"h-4 w-4\" /> Unsaved changes </p> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 835,
      "column": 17,
      "context": "nt=\"outline\" onClick={onClose} > Cancel </Button> <Button"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save Changes",
      "line": 844,
      "column": 17,
      "context": "2\" > <Save className=\"h-4 w-4\" /> Save Changes </Button> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error refreshing analytics",
      "line": 103,
      "column": 20,
      "context": "; } loadAnalyticsStatus(); } catch (error) { logger.error('Error refreshing analytics', error); } finally { setIsRefreshing(fals"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics:",
      "line": 138,
      "column": 11,
      "context": "<Badge variant={getStatusColor(status)} className=\"text-xs\"> Analytics: {getStatusText(status)} </Badge> {status.lastAnalyzed"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Updated",
      "line": 142,
      "column": 13,
      "context": "zed && ( <span className=\"text-xs text-muted-foreground\"> Updated {formatDistanceToNow(status.lastAnalyzed, { addSuffix: true })}"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Status",
      "line": 155,
      "column": 13,
      "context": "flex items-center gap-2\"> <Brain className=\"h-5 w-5\" /> Analytics Status {studentId && ` - ${analyticsStatus[0]?.studentName"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Refresh",
      "line": 165,
      "column": 13,
      "context": "className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} /> Refresh </Button> </div> </CardHeader> <CardConten"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No analytics data available",
      "line": 173,
      "column": 16,
      "context": "<Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" /> <p>No analytics data available</p> </div> ) : ( <div cl"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Available",
      "line": 192,
      "column": 27,
      "context": "<BarChart3 className=\"h-3 w-3 mr-1\" /> Data Available </Badge> ) : ("
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Collecting Data",
      "line": 197,
      "column": 27,
      "context": "<Clock className=\"h-3 w-3 mr-1\" /> Collecting Data </Badge> )}"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last updated:",
      "line": 207,
      "column": 25,
      "context": "{status.lastAnalyzed ? ( <> Last updated:<br /> {formatDistanceToNow(status.lastAnal"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active Analytics Systems:",
      "line": 220,
      "column": 66,
      "context": "order-border\"> <h4 className=\"font-medium text-foreground mb-3\">Active Analytics Systems:</h4> <div className=\"grid grid-cols-2"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis",
      "line": 224,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Pattern Analysis </div> <div className=\"flex"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation Analysis",
      "line": 228,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Correlation Analysis </div> <div className=\""
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Predictive Insights",
      "line": 232,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Predictive Insights </div> <div className=\"f"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly Detection",
      "line": 236,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Anomaly Detection </div> <div className=\"fle"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert System",
      "line": 240,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Alert System </div> <div className=\"flex ite"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Auto-Updates",
      "line": 244,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Auto-Updates </div> </div> </div"
    },
    {
      "file": "src/components/ConfidenceIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 104,
      "column": 19,
      "context": "<div key={index} className=\"text-xs text-muted-foreground\"> • {explanation} </div> ))} </div>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datainnsamlingskart",
      "line": 143,
      "column": 13,
      "context": "x items-center gap-2\"> <Calendar className=\"h-5 w-5\" /> Datainnsamlingskart </CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start datainnsamlingen for å se ditt fremgangskart mot høyere sikkerhetsnivåer.",
      "line": 149,
      "column": 13,
      "context": "foreground\" /> <p className=\"text-muted-foreground mb-4\"> Start datainnsamlingen for å se ditt fremgangskart mot høyere sikkerhetsnivåer."
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datainnsamlingskart",
      "line": 161,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Calendar className=\"h-5 w-5\" /> Datainnsamlingskart </CardTitle> <div className=\"text-sm text-mu"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang mot høyere sikkerhetsnivå gjennom systematisk datainnsamling",
      "line": 164,
      "column": 11,
      "context": "</CardTitle> <div className=\"text-sm text-muted-foreground\"> Fremgang mot høyere sikkerhetsnivå gjennom systematisk datainnsamling </"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Din fremgang",
      "line": 171,
      "column": 43,
      "context": "x items-center justify-between mb-2\"> <span className=\"font-medium\">Din fremgang</span> <Badge variant=\"outline\"> {milesto"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "av",
      "line": 173,
      "column": 59,
      "context": "ge variant=\"outline\"> {milestones.filter(m => m.achieved).length} av {milestones.length} milepæler </Badge> </div>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "milepæler",
      "line": 173,
      "column": 82,
      "context": "{milestones.filter(m => m.achieved).length} av {milestones.length} milepæler </Badge> </div> <div className=\"grid g"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter:",
      "line": 178,
      "column": 55,
      "context": "xt-sm\"> <div> <span className=\"text-muted-foreground\">Datapunkter: </span> <span className=\"font-medium\">{currentStatus."
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dager:",
      "line": 182,
      "column": 55,
      "context": "</div> <div> <span className=\"text-muted-foreground\">Dager: </span> <span className=\"font-medium\">{currentStatus.daysSp"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Neste mål:",
      "line": 196,
      "column": 45,
      "context": "</div> <div> <h4 className=\"font-medium\">Neste mål: {nextMilestone.title}</h4> <p className=\"text-sm text"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang",
      "line": 203,
      "column": 23,
      "context": "iv className=\"flex items-center justify-between text-sm\"> <span>Fremgang</span> <span>{Math.round(nextMilestone.progress)}%</spa"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter:",
      "line": 209,
      "column": 19,
      "context": "2 gap-4 text-xs text-muted-foreground\"> <div> Datapunkter: {currentStatus.dataPoints}/{nextMilestone.targetDataPoints}"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dager:",
      "line": 212,
      "column": 19,
      "context": "argetDataPoints} </div> <div> Dager: {currentStatus.daysSpan}/{nextMilestone.targetDays} </div"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Estimert ferdigdato:",
      "line": 220,
      "column": 17,
      "context": "\"> <Calendar className=\"h-4 w-4 inline mr-1\" /> Estimert ferdigdato: {formatDate(nextMilestone.estimatedDate)} </d"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Komplett veikart",
      "line": 228,
      "column": 39,
      "context": "e */} <div className=\"space-y-4\"> <h4 className=\"font-medium\">Komplett veikart</h4> <div className=\"relative\"> {/* Timel"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter",
      "line": 260,
      "column": 56,
      "context": "text-muted-foreground\"> <span>{milestone.targetDataPoints} datapunkter</span> <span>{milestone.targetDays} dager</span>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 261,
      "column": 50,
      "context": "DataPoints} datapunkter</span> <span>{milestone.targetDays} dager</span> {milestone.estimatedDate && !milestone.achieved"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Estimert:",
      "line": 263,
      "column": 29,
      "context": "milestone.estimatedDate && !milestone.achieved && ( <span>Estimert: {formatDate(milestone.estimatedDate)}</span> )}"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 213,
      "column": 13,
      "context": "items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Datakvalitet </CardTitle> </CardHeader> <CardContent c"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data tilgjengelig for kvalitetsvurdering",
      "line": 219,
      "column": 13,
      "context": "uted-foreground\" /> <p className=\"text-muted-foreground\"> Ingen data tilgjengelig for kvalitetsvurdering </p> </CardCont"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 231,
      "column": 11,
      "context": "flex items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Datakvalitet </CardTitle> <div className=\"flex items-center gap-"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet score:",
      "line": 235,
      "column": 61,
      "context": "tems-center gap-2\"> <span className=\"text-sm text-muted-foreground\">Samlet score:</span> <Badge variant={overallScore >= 80 ? 'default'"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 267,
      "column": 23,
      "context": "<p key={index} className=\"text-xs opacity-90\"> • {rec} </p> ))} </div>"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet vurdering",
      "line": 278,
      "column": 44,
      "context": "/20 dark:to-blue-950/20 rounded-lg\"> <h4 className=\"font-medium mb-2\">Samlet vurdering</h4> <p className=\"text-sm text-muted-foreground mb-3"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Prioriterte forbedringer:",
      "line": 289,
      "column": 51,
      "context": "<div className=\"space-y-2\"> <h5 className=\"text-sm font-medium\">Prioriterte forbedringer:</h5> {qualityMetrics .fi"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakrav for sikkerhetsnivå",
      "line": 140,
      "column": 13,
      "context": "lex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Datakrav for sikkerhetsnivå </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data registrert ennå. Start med å samle data for å se fremgang mot sikkerhetsnivåer.",
      "line": 146,
      "column": 13,
      "context": "foreground\" /> <p className=\"text-muted-foreground mb-4\"> Ingen data registrert ennå. Start med å samle data for å se fremgang mot sikkerh"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start datainnsamling",
      "line": 149,
      "column": 13,
      "context": "kkerhetsnivåer. </p> <Button variant=\"outline\"> Start datainnsamling </Button> </CardContent> </Card>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakrav for sikkerhetsnivå",
      "line": 161,
      "column": 11,
      "context": "e=\"flex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Datakrav for sikkerhetsnivå </CardTitle> <div className=\"flex it"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter samlet",
      "line": 164,
      "column": 44,
      "context": "ap-4 text-sm text-muted-foreground\"> <span>{currentStatus.dataPoints} datapunkter samlet</span> <span>{currentStatus.daysSpan} dager med dat"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager med data",
      "line": 165,
      "column": 42,
      "context": ".dataPoints} datapunkter samlet</span> <span>{currentStatus.daysSpan} dager med data</span> </div> </CardHeader> <CardContent clas"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nåværende sikkerhetsnivå",
      "line": 172,
      "column": 40,
      "context": "bg-muted/50 rounded-lg\"> <div> <p className=\"font-medium\">Nåværende sikkerhetsnivå</p> <p className=\"text-sm text-muted-foregr"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sikkerhet",
      "line": 181,
      "column": 81,
      "context": "{currentLevel >= 3 ? 'Høy' : currentLevel >= 1 ? 'Middels' : 'Lav'} sikkerhet </Badge> </div> {/* Progress toward next le"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang mot",
      "line": 189,
      "column": 43,
      "context": "=\"flex items-center justify-between\"> <h4 className=\"font-medium\">Fremgang mot {nextTarget.requirement.description}</h4> <span class"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% fullført",
      "line": 191,
      "column": 50,
      "context": "ext-sm text-muted-foreground\"> {Math.round(nextTarget.progress)}% fullført </span> </div> <Pr"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter",
      "line": 200,
      "column": 25,
      "context": "className=\"flex items-center justify-between text-sm\"> <span>Datapunkter</span> <span>{nextTarget.dataPoints.current} / {ne"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "flere datapunkter trengs",
      "line": 206,
      "column": 52,
      "context": "t-xs text-muted-foreground\"> {nextTarget.dataPoints.needed} flere datapunkter trengs </p> )}"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tidsperiode",
      "line": 213,
      "column": 25,
      "context": "className=\"flex items-center justify-between text-sm\"> <span>Tidsperiode</span> <span>{nextTarget.days.current} / {nextTarg"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 214,
      "column": 86,
      "context": "<span>{nextTarget.days.current} / {nextTarget.requirement.minDays} dager</span> </div> <Progress value={nextTarget."
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "flere dager trengs",
      "line": 219,
      "column": 46,
      "context": "e=\"text-xs text-muted-foreground\"> {nextTarget.days.needed} flere dager trengs </p> )} </div"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tidsestimat",
      "line": 229,
      "column": 80,
      "context": "<span className=\"font-medium text-blue-900 dark:text-blue-100\">Tidsestimat</span> </div> <p className=\"text-sm text"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Med",
      "line": 232,
      "column": 17,
      "context": "<p className=\"text-sm text-blue-800 dark:text-blue-200\"> Med {getRecommendedRate()} datapunkt(er) per dag vil du nå{' '}"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkt(er) per dag vil du nå",
      "line": 232,
      "column": 44,
      "context": "m text-blue-800 dark:text-blue-200\"> Med {getRecommendedRate()} datapunkt(er) per dag vil du nå{' '} <span className=\"font-mediu"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "innen",
      "line": 233,
      "column": 91,
      "context": "<span className=\"font-medium\">{nextTarget.requirement.description}</span> innen{' '} <span className=\"font-medium\">{formatDate(nextTarget."
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alle sikkerhetsnivåer",
      "line": 243,
      "column": 39,
      "context": "w */} <div className=\"space-y-3\"> <h4 className=\"font-medium\">Alle sikkerhetsnivåer</h4> {progressCalculations.map((calc) => ("
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter over",
      "line": 261,
      "column": 54,
      "context": "xs text-muted-foreground\"> {calc.requirement.minDataPoints} datapunkter over {calc.requirement.minDays} dager </p>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 261,
      "column": 98,
      "context": "{calc.requirement.minDataPoints} datapunkter over {calc.requirement.minDays} dager </p> </div> </div>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager igjen",
      "line": 271,
      "column": 42,
      "context": "=\"text-xs text-muted-foreground mt-1\"> ~{calc.daysToTarget} dager igjen </p> )} </div>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anbefalinger",
      "line": 284,
      "column": 82,
      "context": "<span className=\"font-medium text-purple-900 dark:text-purple-100\">Anbefalinger</span> </div> <ul className=\"text-sm text-p"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Samle",
      "line": 287,
      "column": 19,
      "context": "ame=\"text-sm text-purple-800 dark:text-purple-200 space-y-1\"> <li>• Samle {getRecommendedRate()} datapunkt(er) per dag for optimal fremgang</li>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkt(er) per dag for optimal fremgang",
      "line": 287,
      "column": 50,
      "context": "rk:text-purple-200 space-y-1\"> <li>• Samle {getRecommendedRate()} datapunkt(er) per dag for optimal fremgang</li> <li>• Registrer da"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Registrer data konsekvent for bedre mønstergjenkjenning",
      "line": 288,
      "column": 19,
      "context": "mendedRate()} datapunkt(er) per dag for optimal fremgang</li> <li>• Registrer data konsekvent for bedre mønstergjenkjenning</li> <li"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Inkluder både følelser og sensoriske opplevelser i hver økt",
      "line": 289,
      "column": 19,
      "context": "Registrer data konsekvent for bedre mønstergjenkjenning</li> <li>• Inkluder både følelser og sensoriske opplevelser i hver økt</li>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Noter miljøfaktorer for å identifisere sammenhenger",
      "line": 290,
      "column": 19,
      "context": "luder både følelser og sensoriske opplevelser i hver økt</li> <li>• Noter miljøfaktorer for å identifisere sammenhenger</li> </ul>"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Quick select",
      "line": 122,
      "column": 36,
      "context": "lassName=\"w-[160px] bg-input border-border\"> <SelectValue placeholder=\"Quick select\" /> </SelectTrigger> <SelectContent> {pr"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date range",
      "line": 154,
      "column": 21,
      "context": "eRange.from, \"LLL dd, y\") ) ) : ( <span>Pick a date range</span> )} <ChevronDown className=\"ml-a"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Selected:",
      "line": 174,
      "column": 44,
      "context": "ame=\"text-sm text-muted-foreground\"> <span className=\"hidden md:inline\">Selected: </span> <span className=\"font-medium text-foreground\">{selecte"
    },
    {
      "file": "src/components/DetailedConfidenceExplanation.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "R² =",
      "line": 208,
      "column": 17,
      "context": "> <div className=\"text-xs text-muted-foreground\"> R² = {rSquared.toFixed(3)} </div> </div> </d"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Specific Feeling (Optional)",
      "line": 131,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Specific Feeling (Optional)</h3> <div className=\"flex flex-wrap gap-"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Duration (minutes)",
      "line": 187,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Duration (minutes)</h3> <div className=\"flex gap-2\"> <"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "How long did it last?",
      "line": 205,
      "column": 29,
      "context": "999 minutes } }} placeholder=\"How long did it last?\" className=\"w-32 px-3 py-2 border border-"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Duration in minutes",
      "line": 209,
      "column": 28,
      "context": "t\" min=\"0\" max=\"999\" aria-label=\"Duration in minutes\" aria-describedby=\"duration-help\""
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "duration-help",
      "line": 210,
      "column": 34,
      "context": "aria-label=\"Duration in minutes\" aria-describedby=\"duration-help\" /> <div className=\"flex gap-1\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "How did it develop?",
      "line": 232,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">How did it develop?</h3> <div className=\"flex gap-2\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sudden",
      "line": 240,
      "column": 17,
      "context": "en')} className=\"font-dyslexia\" > Sudden </Button> <Button variant={es"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Gradual",
      "line": 248,
      "column": 17,
      "context": "al')} className=\"font-dyslexia\" > Gradual </Button> <Button variant={e"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Unknown",
      "line": 256,
      "column": 17,
      "context": "wn')} className=\"font-dyslexia\" > Unknown </Button> </div> </div> )}"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Utløsere (Valgfritt)",
      "line": 264,
      "column": 68,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Utløsere (Valgfritt)</h3> <div className=\"flex gap-2 mb-2\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Legg til en utløser...",
      "line": 271,
      "column": 27,
      "context": "ress={(e) => e.key === 'Enter' && handleAddTrigger()} placeholder=\"Legg til en utløser...\" className=\"flex-1 px-3 py-2 border border"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 286,
      "column": 27,
      "context": "={() => handleRemoveTrigger(trigger)} > {trigger} × </Badge> ))} </div> </div>"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Ytterligere observasjoner...",
      "line": 298,
      "column": 25,
      "context": "onChange={(e) => setNotes(e.target.value)} placeholder=\"Ytterligere observasjoner...\" className=\"font-dyslexia bg-input bor"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please fill out all required fields (lighting, activity, weather, time of day).",
      "line": 51,
      "column": 19,
      "context": "(!lighting || !classroomActivity || !weather || !timeOfDay) { toast.error('Please fill out all required fields (lighting, activity, weather, time of day)."
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "°C",
      "line": 100,
      "column": 80,
      "context": "{String(tTracking('environmental.temperature'))}: {roomTemperature}°C </Label> <Slider value={[roomTemperature]}"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "15°C",
      "line": 111,
      "column": 19,
      "context": "assName=\"flex justify-between text-xs text-muted-foreground\"> <span>15°C</span> <span>30°C</span> </div> </div>"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "30°C",
      "line": 112,
      "column": 19,
      "context": "text-xs text-muted-foreground\"> <span>15°C</span> <span>30°C</span> </div> </div> {/* Lighting */} <d"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[ErrorBoundary] Component error caught",
      "line": 95,
      "column": 18,
      "context": "ronment configuration and doesn't log to console in production logger.error('[ErrorBoundary] Component error caught', { error: { message: erro"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "An unexpected error occurred",
      "line": 129,
      "column": 21,
      "context": "ble; also emit a dev-only minimal toast payload try { toast.error('An unexpected error occurred', { description: import.meta.env.DEV &&"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "An unexpected error occurred",
      "line": 129,
      "column": 21,
      "context": "ble; also emit a dev-only minimal toast payload try { toast.error('An unexpected error occurred', { description: import.meta.env.DEV &&"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: toast()",
      "value": "Page automatically refreshed after multiple errors",
      "line": 159,
      "column": 13,
      "context": "this.resetTimeoutId = setTimeout(() => { this.handleRetry(); toast('Page automatically refreshed after multiple errors'); }, 5000); }; /**"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast()",
      "value": "Page automatically refreshed after multiple errors",
      "line": 159,
      "column": 13,
      "context": "this.resetTimeoutId = setTimeout(() => { this.handleRetry(); toast('Page automatically refreshed after multiple errors'); }, 5000); }; /**"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "App data cleared",
      "line": 204,
      "column": 21,
      "context": "ch { // Ignore removal errors } }); toast.success('App data cleared'); } catch (e) { // best-effort only logger.wa"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "App data cleared",
      "line": 204,
      "column": 21,
      "context": "ch { // Ignore removal errors } }); toast.success('App data cleared'); } catch (e) { // best-effort only logger.wa"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "error-title",
      "line": 231,
      "column": 119,
      "context": "g-background flex items-center justify-center p-4\" role=\"alert\" aria-labelledby=\"error-title\" aria-describedby=\"error-description\"> <Card className=\"m"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "error-description",
      "line": 231,
      "column": 150,
      "context": "justify-center p-4\" role=\"alert\" aria-labelledby=\"error-title\" aria-describedby=\"error-description\"> <Card className=\"max-w-lg w-full\"> <C"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Something went wrong",
      "line": 236,
      "column": 17,
      "context": "<AlertTriangle className=\"h-5 w-5\" aria-hidden=\"true\" /> Something went wrong </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "An unexpected error occurred. The application may not be working correctly.",
      "line": 241,
      "column": 17,
      "context": "=\"error-description\" className=\"text-sm text-muted-foreground\"> An unexpected error occurred. The application may not be working correctly."
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Error Details",
      "line": 250,
      "column": 67,
      "context": "me=\"text-xs\"> <summary className=\"cursor-pointer font-medium\">Error Details</summary> <pre className=\"mt-2 p-2 bg-muted roun"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Try again - attempt to recover from the error",
      "line": 271,
      "column": 30,
      "context": ".handleRetry} variant=\"default\" aria-label=\"Try again - attempt to recover from the error\" >"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Try Again",
      "line": 274,
      "column": 19,
      "context": "<RefreshCw className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" /> Try Again </Button> <Button o"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Reload page - refresh the entire application",
      "line": 279,
      "column": 30,
      "context": "handleReload} variant=\"outline\" aria-label=\"Reload page - refresh the entire application\" >"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reload Page",
      "line": 282,
      "column": 19,
      "context": "<RefreshCw className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" /> Reload Page </Button> <Button"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Clear App Data removes only Sensory Compass app data (keys starting with sensoryTracker_ and keys containing sensory-compass-analytics)",
      "line": 287,
      "column": 25,
      "context": "handleClearAppData} variant=\"outline\" title=\"Clear App Data removes only Sensory Compass app data (keys starting with sensor"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Clear app data - removes only Sensory Compass data from browser storage",
      "line": 288,
      "column": 30,
      "context": "r_ and keys containing sensory-compass-analytics)\" aria-label=\"Clear app data - removes only Sensory Compass data from browser storage\""
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear App Data",
      "line": 290,
      "column": 19,
      "context": "Sensory Compass data from browser storage\" > Clear App Data </Button> <Button"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Go home - navigate to the application home page",
      "line": 295,
      "column": 30,
      "context": "handleGoHome} variant=\"outline\" aria-label=\"Go home - navigate to the application home page\" >"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Go Home",
      "line": 298,
      "column": 19,
      "context": "<Home className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" /> Go Home </Button> </div>"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Auto-refreshing in 5 seconds...",
      "line": 304,
      "column": 19,
      "context": "<p className=\"text-xs text-muted-foreground\"> Auto-refreshing in 5 seconds... </p> )}"
    },
    {
      "file": "src/components/ErrorWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Something went wrong loading this component",
      "line": 16,
      "column": 15,
      "context": "text-destructive\"> <AlertTriangle className=\"h-5 w-5\" /> <span>Something went wrong loading this component</span> </div> </CardConten"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please fill in all required fields",
      "line": 97,
      "column": 19,
      "context": ".description.trim() || !newGoal.measurableObjective.trim()) { toast.error(\"Please fill in all required fields\"); return; } // Validate targ"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Please fill in all required fields",
      "line": 97,
      "column": 19,
      "context": ".description.trim() || !newGoal.measurableObjective.trim()) { toast.error(\"Please fill in all required fields\"); return; } // Validate targ"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please select a target date",
      "line": 103,
      "column": 19,
      "context": "} // Validate target date if (!newGoal.targetDate) { toast.error(\"Please select a target date\"); return; } const targetDate = new"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Please select a target date",
      "line": 103,
      "column": 19,
      "context": "} // Validate target date if (!newGoal.targetDate) { toast.error(\"Please select a target date\"); return; } const targetDate = new"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid target date",
      "line": 109,
      "column": 19,
      "context": "e(newGoal.targetDate); if (isNaN(targetDate.getTime())) { toast.error(\"Invalid target date\"); return; } // Ensure target date is in the"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Invalid target date",
      "line": 109,
      "column": 19,
      "context": "e(newGoal.targetDate); if (isNaN(targetDate.getTime())) { toast.error(\"Invalid target date\"); return; } // Ensure target date is in the"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Target date must be in the future",
      "line": 117,
      "column": 19,
      "context": "today.setHours(0, 0, 0, 0); if (targetDate < today) { toast.error(\"Target date must be in the future\"); return; } // Validate basel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Target date must be in the future",
      "line": 117,
      "column": 19,
      "context": "today.setHours(0, 0, 0, 0); if (targetDate < today) { toast.error(\"Target date must be in the future\"); return; } // Validate basel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Target value must be greater than baseline value",
      "line": 123,
      "column": 19,
      "context": "alues if (newGoal.targetValue <= newGoal.baselineValue) { toast.error(\"Target value must be greater than baseline value\"); return; } co"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Target value must be greater than baseline value",
      "line": 123,
      "column": 19,
      "context": "alues if (newGoal.targetValue <= newGoal.baselineValue) { toast.error(\"Target value must be greater than baseline value\"); return; } co"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Goal created successfully!",
      "line": 155,
      "column": 19,
      "context": "loadGoals(); resetForm(); setShowCreateDialog(false); toast.success(\"Goal created successfully!\"); onGoalUpdate?.(); }; const updateGoal ="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Goal created successfully!",
      "line": 155,
      "column": 19,
      "context": "loadGoals(); resetForm(); setShowCreateDialog(false); toast.success(\"Goal created successfully!\"); onGoalUpdate?.(); }; const updateGoal ="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Progress updated!",
      "line": 189,
      "column": 19,
      "context": "urrentProgress: Math.max(0, Math.min(100, progress)) }); toast.success(\"Progress updated!\"); }; const addMilestone = (goalId: string, title: strin"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Progress updated!",
      "line": 189,
      "column": 19,
      "context": "urrentProgress: Math.max(0, Math.min(100, progress)) }); toast.success(\"Progress updated!\"); }; const addMilestone = (goalId: string, title: strin"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Milestone added!",
      "line": 208,
      "column": 19,
      "context": "milestones: [...goal.milestones, newMilestone] }); toast.success(\"Milestone added!\"); }; const completeMilestone = (goalId: string, mileston"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Milestone added!",
      "line": 208,
      "column": 19,
      "context": "milestones: [...goal.milestones, newMilestone] }); toast.success(\"Milestone added!\"); }; const completeMilestone = (goalId: string, mileston"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Milestone completed! 🎉",
      "line": 222,
      "column": 19,
      "context": "; updateGoal(goalId, { milestones: updatedMilestones }); toast.success(\"Milestone completed! 🎉\"); }; /** * Delete a goal with proper confirmat"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Milestone completed! 🎉",
      "line": 222,
      "column": 19,
      "context": "; updateGoal(goalId, { milestones: updatedMilestones }); toast.success(\"Milestone completed! 🎉\"); }; /** * Delete a goal with proper confirmat"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Goal deleted",
      "line": 244,
      "column": 23,
      "context": "dataStorage.saveGoal(updatedGoal); loadGoals(); toast.success(\"Goal deleted\"); onGoalUpdate?.(); } } catch (error) { l"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Goal deleted",
      "line": 244,
      "column": 23,
      "context": "dataStorage.saveGoal(updatedGoal); loadGoals(); toast.success(\"Goal deleted\"); onGoalUpdate?.(); } } catch (error) { l"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete goal",
      "line": 248,
      "column": 20,
      "context": "d\"); onGoalUpdate?.(); } } catch (error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Pleas"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete goal. Please try again.",
      "line": 249,
      "column": 19,
      "context": "(error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Please try again.'); } }; const resetForm = ()"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to delete goal. Please try again.",
      "line": 249,
      "column": 19,
      "context": "(error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Please try again.'); } }; const resetForm = ()"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "IEP Goals",
      "line": 292,
      "column": 62,
      "context": "en\"> <div> <h2 className=\"text-2xl font-bold text-foreground\">IEP Goals</h2> <p className=\"text-muted-foreground\">Track and monitor"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Track and monitor",
      "line": 293,
      "column": 48,
      "context": "text-foreground\">IEP Goals</h2> <p className=\"text-muted-foreground\">Track and monitor {student.name}'s progress toward educational objectives</p>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s progress toward educational objectives",
      "line": 293,
      "column": 80,
      "context": "<p className=\"text-muted-foreground\">Track and monitor {student.name}'s progress toward educational objectives</p> </div> <Dialog ope"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "New Goal",
      "line": 299,
      "column": 15,
      "context": "0 font-dyslexia\"> <Plus className=\"h-4 w-4 mr-2\" /> New Goal </Button> </DialogTrigger> <DialogConte"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create New IEP Goal",
      "line": 304,
      "column": 28,
      "context": "nt className=\"max-w-2xl\"> <DialogHeader> <DialogTitle>Create New IEP Goal</DialogTitle> </DialogHeader> <div c"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goal Title *",
      "line": 308,
      "column": 40,
      "context": "assName=\"space-y-4\"> <div> <Label htmlFor=\"title\">Goal Title *</Label> <Input id=\"title\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "e.g., Improve emotional regulation during transitions",
      "line": 313,
      "column": 31,
      "context": "al(prev => ({ ...prev, title: e.target.value }))} placeholder=\"e.g., Improve emotional regulation during transitions\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 317,
      "column": 43,
      "context": "</div> <div> <Label htmlFor=\"category\">Category</Label> <Select value={newGoal.category} onValueChange="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Behavioral",
      "line": 323,
      "column": 52,
      "context": "<SelectContent> <SelectItem value=\"behavioral\">Behavioral</SelectItem> <SelectItem value=\"academic\">Academi"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Academic",
      "line": 324,
      "column": 50,
      "context": "ioral\">Behavioral</SelectItem> <SelectItem value=\"academic\">Academic</SelectItem> <SelectItem value=\"social\">Social</Sel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Social",
      "line": 325,
      "column": 48,
      "context": "\"academic\">Academic</SelectItem> <SelectItem value=\"social\">Social</SelectItem> <SelectItem value=\"sensory\">Sensory</Sel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 326,
      "column": 49,
      "context": "ue=\"social\">Social</SelectItem> <SelectItem value=\"sensory\">Sensory</SelectItem> <SelectItem value=\"communication\">Commu"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Communication",
      "line": 327,
      "column": 55,
      "context": "ory\">Sensory</SelectItem> <SelectItem value=\"communication\">Communication</SelectItem> </SelectContent> </"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Description *",
      "line": 332,
      "column": 46,
      "context": "</div> <div> <Label htmlFor=\"description\">Description *</Label> <Textarea id=\"descriptio"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Detailed description of what the student will achieve...",
      "line": 337,
      "column": 31,
      "context": "v => ({ ...prev, description: e.target.value }))} placeholder=\"Detailed description of what the student will achieve...\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Measurable Objective *",
      "line": 341,
      "column": 45,
      "context": "</div> <div> <Label htmlFor=\"measurable\">Measurable Objective *</Label> <Textarea id=\"m"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "How will progress be measured? Include specific criteria...",
      "line": 346,
      "column": 31,
      "context": "...prev, measurableObjective: e.target.value }))} placeholder=\"How will progress be measured? Include specific criteria...\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Baseline Value",
      "line": 351,
      "column": 45,
      "context": "ols-2 gap-4\"> <div> <Label htmlFor=\"baseline\">Baseline Value</Label> <Input id=\"baseline"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target Value",
      "line": 360,
      "column": 43,
      "context": "</div> <div> <Label htmlFor=\"target\">Target Value</Label> <Input id=\"target\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target Date",
      "line": 370,
      "column": 45,
      "context": "</div> <div> <Label htmlFor=\"targetDate\">Target Date</Label> <Input id=\"targetDate\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 380,
      "column": 19,
      "context": "onClick={() => { resetForm(); setShowCreateDialog(false); }}> Cancel </Button> <Button onClick={createGoal}>Cr"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Goal",
      "line": 382,
      "column": 46,
      "context": "Cancel </Button> <Button onClick={createGoal}>Create Goal</Button> </div> </div> </DialogC"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No IEP Goals Yet",
      "line": 394,
      "column": 72,
      "context": "mb-4\" /> <h3 className=\"text-xl font-semibold text-foreground mb-2\">No IEP Goals Yet</h3> <p className=\"text-muted-foreground text-cente"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start by creating your first IEP goal to track",
      "line": 396,
      "column": 15,
      "context": "<p className=\"text-muted-foreground text-center mb-6 max-w-md\"> Start by creating your first IEP goal to track {student.name}'s educational prog"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s educational progress.",
      "line": 396,
      "column": 76,
      "context": "md\"> Start by creating your first IEP goal to track {student.name}'s educational progress. </p> <Button onClick={() => set"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create First Goal",
      "line": 400,
      "column": 15,
      "context": "0 font-dyslexia\"> <Plus className=\"h-4 w-4 mr-2\" /> Create First Goal </Button> </CardContent> </Card>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress",
      "line": 439,
      "column": 59,
      "context": "ustify-between mb-2\"> <span className=\"text-sm font-medium\">Progress</span> <span className=\"text-sm text-muted-foregrou"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Measurable Objective",
      "line": 447,
      "column": 52,
      "context": "<div className=\"mb-4\"> <h4 className=\"font-medium mb-2\">Measurable Objective</h4> <p className=\"text-sm text-muted-for"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Created:",
      "line": 457,
      "column": 27,
      "context": "ndarIcon className=\"h-4 w-4 text-muted-foreground\" /> <span>Created: {format(goal.createdDate, 'MMM dd, yyyy')}</span> </d"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target:",
      "line": 461,
      "column": 27,
      "context": "rosshair className=\"h-4 w-4 text-muted-foreground\" /> <span>Target: {format(goal.targetDate, 'MMM dd, yyyy')}</span> </div"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Milestones",
      "line": 468,
      "column": 49,
      "context": "s-center justify-between mb-2\"> <h4 className=\"font-medium\">Milestones</h4> <Button variant=\"outl"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Milestone title:",
      "line": 473,
      "column": 46,
      "context": "onClick={() => { const title = prompt(\"Milestone title:\"); const description = prompt(\"Milesto"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Milestone description:",
      "line": 474,
      "column": 52,
      "context": "prompt(\"Milestone title:\"); const description = prompt(\"Milestone description:\"); const dateStr = prompt(\"Targe"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Target date (YYYY-MM-DD):",
      "line": 475,
      "column": 48,
      "context": "rompt(\"Milestone description:\"); const dateStr = prompt(\"Target date (YYYY-MM-DD):\"); if (title && description &"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Add",
      "line": 482,
      "column": 23,
      "context": "> <Plus className=\"h-3 w-3 mr-1\" /> Add </Button> </div> {go"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No milestones yet",
      "line": 486,
      "column": 66,
      "context": "ngth === 0 ? ( <p className=\"text-sm text-muted-foreground\">No milestones yet</p> ) : ( <div className"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Enter current progress value:",
      "line": 520,
      "column": 44,
      "context": "onClick={() => { const value = prompt(\"Enter current progress value:\"); const notes = prompt(\"Pr"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Progress notes (optional):",
      "line": 521,
      "column": 44,
      "context": "pt(\"Enter current progress value:\"); const notes = prompt(\"Progress notes (optional):\"); if (value) {"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Update Progress",
      "line": 528,
      "column": 21,
      "context": "<TrendingUp className=\"h-4 w-4 mr-1\" /> Update Progress </Button> </div>"
    },
    {
      "file": "src/components/HelpAndSupport.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hjelp & Støtte",
      "line": 17,
      "column": 11,
      "context": "lassName=\"mr-2 h-4 w-4 transition-transform group-hover:rotate-12\" /> Hjelp & Støtte </Button> </DialogTrigger> <DialogContent>"
    },
    {
      "file": "src/components/HelpAndSupport.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Help & Support",
      "line": 22,
      "column": 24,
      "context": "logTrigger> <DialogContent> <DialogHeader> <DialogTitle>Help & Support</DialogTitle> </DialogHeader> <div> <p>"
    },
    {
      "file": "src/components/HelpAndSupport.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "If you need help or support, please contact us at:",
      "line": 25,
      "column": 14,
      "context": "Help & Support</DialogTitle> </DialogHeader> <div> <p>If you need help or support, please contact us at:</p> <a href=\"mailto"
    },
    {
      "file": "src/components/HelpAndSupport.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "support@example.com",
      "line": 27,
      "column": 13,
      "context": "<a href=\"mailto:support@example.com\" className=\"text-primary\"> support@example.com </a> </div> </DialogContent> </D"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export failed",
      "line": 175,
      "column": 20,
      "context": "oUpperCase()} exported successfully`); } catch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive ana"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to export interactive analytics data",
      "line": 176,
      "column": 19,
      "context": "tch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive analytics data'); } finally { setIsExpor"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to export interactive analytics data",
      "line": 176,
      "column": 19,
      "context": "tch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive analytics data'); } finally { setIsExpor"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Mock data loaded successfully!",
      "line": 74,
      "column": 21,
      "context": "olve, 300); }); setLoadingProgress(100); toast.success('Mock data loaded successfully!', { description: `Loaded ${result.studen"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Mock data loaded successfully!",
      "line": 74,
      "column": 21,
      "context": "olve, 300); }); setLoadingProgress(100); toast.success('Mock data loaded successfully!', { description: `Loaded ${result.studen"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load mock data",
      "line": 87,
      "column": 19,
      "context": "{ clearInterval(progressIntervalRef.current); } toast.error('Failed to load mock data', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to load mock data",
      "line": 87,
      "column": 19,
      "context": "{ clearInterval(progressIntervalRef.current); } toast.error('Failed to load mock data', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Mock data cleared successfully!",
      "line": 105,
      "column": 21,
      "context": "clearMockData function await clearMockData(); toast.success('Mock data cleared successfully!'); // Dispatch a custom event to f"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Mock data cleared successfully!",
      "line": 105,
      "column": 21,
      "context": "clearMockData function await clearMockData(); toast.success('Mock data cleared successfully!'); // Dispatch a custom event to f"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear mock data",
      "line": 111,
      "column": 19,
      "context": "CustomEvent('mockDataLoaded')); } catch (error) { toast.error('Failed to clear mock data', { description: error instanceof Error ? err"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear mock data",
      "line": 111,
      "column": 19,
      "context": "CustomEvent('mockDataLoaded')); } catch (error) { toast.error('Failed to clear mock data', { description: error instanceof Error ? err"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data for Testing",
      "line": 129,
      "column": 11,
      "context": "enter gap-2\"> <Database className=\"h-5 w-5 text-primary\" /> Mock Data for Testing </CardTitle> </CardHeader> <CardConten"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load realistic test data to explore pattern analysis and correlation features.\n          Mock data includes 3 students with 3-6 months of tracking data each.",
      "line": 134,
      "column": 11,
      "context": "=\"space-y-4\"> <div className=\"text-sm text-muted-foreground\"> Load realistic test data to explore pattern analysis and correlation features."
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students to be created:",
      "line": 141,
      "column": 48,
      "context": "<div className=\"space-y-2\"> <div className=\"text-sm font-medium\">Students to be created:</div> <div className=\"space-y-1\">"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Current Data:",
      "line": 155,
      "column": 50,
      "context": "uted/50 rounded-lg space-y-1\"> <div className=\"text-sm font-medium\">Current Data:</div> <div className=\"text-xs text-muted-foreground sp"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 157,
      "column": 20,
      "context": "<div className=\"text-xs text-muted-foreground space-y-1\"> <div>• {currentStats.studentsCount} students</div> <div>• {currentStats"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "students",
      "line": 157,
      "column": 51,
      "context": "-muted-foreground space-y-1\"> <div>• {currentStats.studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 158,
      "column": 20,
      "context": "<div>• {currentStats.studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries</div> {hasMockData"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "tracking entries",
      "line": 158,
      "column": 50,
      "context": ".studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries</div> {hasMockData && <div className=\"text-orange"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Contains mock data",
      "line": 159,
      "column": 64,
      "context": "ng entries</div> {hasMockData && <div className=\"text-orange-600\">• Contains mock data</div>} </div> </div> )}"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading mock data...",
      "line": 167,
      "column": 60,
      "context": "assName=\"space-y-2\"> <div className=\"text-sm text-muted-foreground\">Loading mock data...</div> <Progress value={loadingProgress} classNa"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Mock Data",
      "line": 180,
      "column": 13,
      "context": "Data} > <Database className=\"h-4 w-4 mr-2\" /> Load Mock Data </Button> {hasMockData && ( <Ale"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All",
      "line": 192,
      "column": 19,
      "context": "> <Trash2 className=\"h-4 w-4 mr-2\" /> Clear All </Button> </AlertDialogTrigger>"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Data?",
      "line": 197,
      "column": 37,
      "context": "ontent> <AlertDialogHeader> <AlertDialogTitle>Clear All Data?</AlertDialogTitle> <AlertDialogDescription>"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "This will permanently delete all student data and tracking entries. \n                    This action cannot be undone.",
      "line": 199,
      "column": 21,
      "context": "lertDialogTitle> <AlertDialogDescription> This will permanently delete all student data and tracking entries."
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 204,
      "column": 38,
      "context": "eader> <AlertDialogFooter> <AlertDialogCancel>Cancel</AlertDialogCancel> <AlertDialogAction onClick={handleC"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Data",
      "line": 207,
      "column": 21,
      "context": "e\"> <Trash2 className=\"h-4 w-4 mr-2\" /> Clear All Data </AlertDialogAction> </AlertDia"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Features you can test:",
      "line": 217,
      "column": 53,
      "context": "-3 border-t border-border\"> <div className=\"text-sm font-medium mb-2\">Features you can test:</div> <div className=\"text-xs text-muted-foregr"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion pattern recognition",
      "line": 219,
      "column": 18,
      "context": "<div className=\"text-xs text-muted-foreground space-y-1\"> <div>• Emotion pattern recognition</div> <div>• Sensory input correlation"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory input correlations",
      "line": 220,
      "column": 18,
      "context": "ace-y-1\"> <div>• Emotion pattern recognition</div> <div>• Sensory input correlations</div> <div>• Environmental factor analy"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Environmental factor analysis",
      "line": 221,
      "column": 18,
      "context": "tion</div> <div>• Sensory input correlations</div> <div>• Environmental factor analysis</div> <div>• Predictive insights & t"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Predictive insights & trends",
      "line": 222,
      "column": 18,
      "context": "s</div> <div>• Environmental factor analysis</div> <div>• Predictive insights & trends</div> <div>• Interactive data visuali"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Interactive data visualization",
      "line": 223,
      "column": 18,
      "context": "is</div> <div>• Predictive insights & trends</div> <div>• Interactive data visualization</div> <div>• Alert system & anomaly"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Alert system & anomaly detection",
      "line": 224,
      "column": 18,
      "context": "</div> <div>• Interactive data visualization</div> <div>• Alert system & anomaly detection</div> </div> </div> <"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No sessions available in the selected period.",
      "line": 60,
      "column": 14,
      "context": "<CardContent className=\"py-16 text-center text-muted-foreground\"> <p>No sessions available in the selected period.</p> </CardContent> <"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Showing",
      "line": 72,
      "column": 19,
      "context": "Name=\"flex items-center gap-2 text-sm text-muted-foreground\"> <span>Showing {startIndex}-{endIndex} of {totalItems}</span> <Select"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "of",
      "line": 72,
      "column": 51,
      "context": "xt-sm text-muted-foreground\"> <span>Showing {startIndex}-{endIndex} of {totalItems}</span> <Select value={pageSize.toStrin"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading sessions...",
      "line": 93,
      "column": 13,
      "context": "( <div className=\"text-center p-8 text-muted-foreground\"> Loading sessions... </div> ) : ( <div> {"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "at",
      "line": 103,
      "column": 62,
      "context": "text-foreground\"> {entry.timestamp.toLocaleDateString()} at {entry.timestamp.toLocaleTimeString()} </span>"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions",
      "line": 107,
      "column": 49,
      "context": "=\"outline\" className=\"text-xs\"> {entry.emotions.length} emotions </Badge> <Badge variant=\"ou"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sensory",
      "line": 110,
      "column": 54,
      "context": "line\" className=\"text-xs\"> {entry.sensoryInputs.length} sensory </Badge> {entry.environmenta"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental data",
      "line": 114,
      "column": 27,
      "context": "<Badge variant=\"outline\" className=\"text-xs\"> Environmental data </Badge> )}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "more",
      "line": 133,
      "column": 56,
      "context": "ne\" className=\"text-xs\"> +{entry.emotions.length - 3} more </Badge> )}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Page",
      "line": 146,
      "column": 19,
      "context": "<div className=\"text-sm text-muted-foreground\"> Page {currentPage} of {totalPages} </div>"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "of",
      "line": 146,
      "column": 38,
      "context": "className=\"text-sm text-muted-foreground\"> Page {currentPage} of {totalPages} </div> <div cla"
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Krav for mønstergjenkjenning:",
      "line": 86,
      "column": 47,
      "context": "<div className=\"space-y-3\"> <h4 className=\"text-sm font-medium\">Krav for mønstergjenkjenning:</h4> {requirements.map((req, index) => ("
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tips for bedre mønstergjenkjenning:",
      "line": 103,
      "column": 13,
      "context": "ssName=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-2\"> Tips for bedre mønstergjenkjenning: </h4> <ul className=\"tex"
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Registrer data på samme tid hver dag",
      "line": 106,
      "column": 17,
      "context": "className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\"> <li>• Registrer data på samme tid hver dag</li> <li>• Inkluder både føle"
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Inkluder både følelser og sensoriske opplevelser",
      "line": 107,
      "column": 17,
      "context": "1\"> <li>• Registrer data på samme tid hver dag</li> <li>• Inkluder både følelser og sensoriske opplevelser</li> <li>• Legg m"
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Legg merke til miljøfaktorer (støy, lys, aktivitet)",
      "line": 108,
      "column": 17,
      "context": "<li>• Inkluder både følelser og sensoriske opplevelser</li> <li>• Legg merke til miljøfaktorer (støy, lys, aktivitet)</li> <li>• Vær"
    },
    {
      "file": "src/components/PatternDetectionEmptyState.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Vær konsistent i minst 2-3 uker",
      "line": 109,
      "column": 17,
      "context": "<li>• Legg merke til miljøfaktorer (støy, lys, aktivitet)</li> <li>• Vær konsistent i minst 2-3 uker</li> </ul> </div> {"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "vs",
      "line": 177,
      "column": 17,
      "context": "-muted-foreground\"> <span>{currentRange.label}</span> <span>vs</span> <span>{comparisonRange.label}</span> </div> </"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "vs",
      "line": 196,
      "column": 17,
      "context": "<div className=\"text-xs text-muted-foreground mt-1\"> vs {metric.format ? metric.format(metric.previous) : metric.previous}"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotion",
      "line": 208,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Emotion</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Most common changed from",
      "line": 210,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Most common changed from <span className=\"font-medium\">{comparisonStats.mostComm"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "to",
      "line": 210,
      "column": 117,
      "context": "d from <span className=\"font-medium\">{comparisonStats.mostCommonEmotion}</span> to{\" \"} <span className=\"font-medium\">{currentStats.mostCommon"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity",
      "line": 218,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Intensity</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Average intensity",
      "line": 220,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Average intensity{\" \"} {currentStats.avgEmotionIntensity > com"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "by",
      "line": 221,
      "column": 120,
      "context": "ionIntensity > comparisonStats.avgEmotionIntensity ? \"increased\" : \"decreased\"} by{\" \"} <span className=\"font-medium\"> {Ma"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "points",
      "line": 223,
      "column": 115,
      "context": "entStats.avgEmotionIntensity - comparisonStats.avgEmotionIntensity).toFixed(1)} points </span> </span> </div>"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 231,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Sensory</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory seeking behavior",
      "line": 233,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Sensory seeking behavior{\" \"} {currentStats.seekingRatio > com"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "by",
      "line": 234,
      "column": 106,
      "context": "tStats.seekingRatio > comparisonStats.seekingRatio ? \"increased\" : \"decreased\"} by{\" \"} <span className=\"font-medium\"> {Ma"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Total Goals",
      "line": 220,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">Total Goals</CardTitle> <Crosshair className=\"h-4 w-4 text-muted-for"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "active,",
      "line": 228,
      "column": 45,
      "context": "me=\"text-xs text-muted-foreground\"> {progressMetrics.activeGoals} active, {progressMetrics.achievedGoals} achieved </p> </Ca"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "achieved",
      "line": 228,
      "column": 85,
      "context": "{progressMetrics.activeGoals} active, {progressMetrics.achievedGoals} achieved </p> </CardContent> </Card> <Car"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Overall Progress",
      "line": 235,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">Overall Progress</CardTitle> <TrendingUp className=\"h-4 w-4 text-mut"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "On Track",
      "line": 248,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">On Track</CardTitle> <CheckCircle className=\"h-4 w-4 text-green-500\""
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals meeting expectations",
      "line": 256,
      "column": 15,
      "context": "</div> <p className=\"text-xs text-muted-foreground\"> goals meeting expectations </p> </CardContent> </C"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "At Risk",
      "line": 263,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">At Risk</CardTitle> <Clock className=\"h-4 w-4 text-red-500\" />"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals needing attention",
      "line": 271,
      "column": 15,
      "context": "</div> <p className=\"text-xs text-muted-foreground\"> goals needing attention </p> </CardContent> </Card"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Overview",
      "line": 279,
      "column": 41,
      "context": "st className=\"grid w-full grid-cols-4\"> <TabsTrigger value=\"overview\">Overview</TabsTrigger> <TabsTrigger value=\"trends\">Trends</TabsTrigger"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Trends",
      "line": 280,
      "column": 39,
      "context": "r value=\"overview\">Overview</TabsTrigger> <TabsTrigger value=\"trends\">Trends</TabsTrigger> <TabsTrigger value=\"categories\">Categories</TabsT"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Categories",
      "line": 281,
      "column": 43,
      "context": "r value=\"trends\">Trends</TabsTrigger> <TabsTrigger value=\"categories\">Categories</TabsTrigger> <TabsTrigger value=\"priorities\">Priorities</T"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Priorities",
      "line": 282,
      "column": 43,
      "context": "\"categories\">Categories</TabsTrigger> <TabsTrigger value=\"priorities\">Priorities</TabsTrigger> </TabsList> <TabsContent value=\"overvi"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress Trends (Last 3 Months)",
      "line": 289,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Progress Trends (Last 3 Months)</CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading trends chart",
      "line": 293,
      "column": 33,
      "context": "rdContent> {isAnalyzingTrends ? ( <div aria-label=\"Loading trends chart\" className=\"h-[300px] w-full\"> <div clas"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Progress trends line chart",
      "line": 320,
      "column": 81,
      "context": "return <EChartContainer option={option} height={300} aria-label=\"Progress trends line chart\" />; })()} </CardContent>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recent Goal Updates",
      "line": 328,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Recent Goal Updates</CardTitle> </CardHeader> <CardConte"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Updated",
      "line": 347,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Updated {format(latestPoint.timestamp, 'MMM dd, yyyy')}"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goal Completion Trends",
      "line": 366,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Goal Completion Trends</CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Goal completion by category bar chart",
      "line": 390,
      "column": 81,
      "context": "return <EChartContainer option={option} height={300} aria-label=\"Goal completion by category bar chart\" />; })()} </Ca"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress by Category",
      "line": 400,
      "column": 28,
      "context": "rd border-0 shadow-soft\"> <CardHeader> <CardTitle>Progress by Category</CardTitle> </CardHeader> <Card"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Progress by category donut chart",
      "line": 426,
      "column": 83,
      "context": "return <EChartContainer option={option} height={250} aria-label=\"Progress by category donut chart\" />; })()} </Car"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category Breakdown",
      "line": 433,
      "column": 28,
      "context": "rd border-0 shadow-soft\"> <CardHeader> <CardTitle>Category Breakdown</CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals",
      "line": 441,
      "column": 67,
      "context": "egory}</span> <Badge variant=\"outline\">{category.count} goals</Badge> </div> <Progress value"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% average progress",
      "line": 445,
      "column": 50,
      "context": "ext-xs text-muted-foreground\"> <span>{category.progress}% average progress</span> <span>{category.achieved} achi"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "achieved",
      "line": 446,
      "column": 51,
      "context": "ess}% average progress</span> <span>{category.achieved} achieved</span> </div> </div>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Priority Goals Requiring Attention",
      "line": 459,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Priority Goals Requiring Attention</CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress",
      "line": 478,
      "column": 31,
      "context": "<div className=\"flex justify-between text-sm\"> <span>Progress</span> <span>{Math.round(goal.currentProgress)}"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "⚠️ This goal is past its target date and may need review or extension.",
      "line": 485,
      "column": 25,
      "context": "50 border border-red-200 rounded text-sm text-red-700\"> ⚠️ This goal is past its target date and may need review or extension."
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "📈 Consider increasing intervention intensity to meet target date.",
      "line": 490,
      "column": 25,
      "context": "der border-yellow-200 rounded text-sm text-yellow-700\"> 📈 Consider increasing intervention intensity to meet target date."
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All goals are on track!",
      "line": 498,
      "column": 71,
      "context": "mb-2\" /> <p className=\"text-lg font-medium text-green-600\">All goals are on track!</p> <p className=\"text-muted-foregro"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Great work keeping",
      "line": 499,
      "column": 58,
      "context": "oals are on track!</p> <p className=\"text-muted-foreground\">Great work keeping {student.name}'s progress moving forward.</p>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s progress moving forward.",
      "line": 499,
      "column": 91,
      "context": "<p className=\"text-muted-foreground\">Great work keeping {student.name}'s progress moving forward.</p> </div> )}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse saved templates, using defaults",
      "line": 169,
      "column": 20,
      "context": "catch (error) { // Log error and fall back to defaults logger.error('Failed to parse saved templates, using defaults', error); return defaultT"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save template changes. Storage may be full.",
      "line": 198,
      "column": 19,
      "context": "able } = storageUtils.getStorageInfo(); if (!available) { toast.error('Failed to save template changes. Storage may be full.'); return; }"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to save template changes. Storage may be full.",
      "line": 198,
      "column": 19,
      "context": "able } = storageUtils.getStorageInfo(); if (!available) { toast.error('Failed to save template changes. Storage may be full.'); return; }"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Cannot delete default templates",
      "line": 237,
      "column": 19,
      "context": "ind(t => t.id === templateId); if (template?.isDefault) { toast.error(\"Cannot delete default templates\"); return; } const updatedTe"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Cannot delete default templates",
      "line": 237,
      "column": 19,
      "context": "ind(t => t.id === templateId); if (template?.isDefault) { toast.error(\"Cannot delete default templates\"); return; } const updatedTe"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Template deleted",
      "line": 243,
      "column": 19,
      "context": "=> t.id !== templateId); saveTemplates(updatedTemplates); toast.success(\"Template deleted\"); }; const createTemplate = () => { if (!newTemplate"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Template deleted",
      "line": 243,
      "column": 19,
      "context": "=> t.id !== templateId); saveTemplates(updatedTemplates); toast.success(\"Template deleted\"); }; const createTemplate = () => { if (!newTemplate"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Template name is required",
      "line": 248,
      "column": 19,
      "context": "createTemplate = () => { if (!newTemplate.name?.trim()) { toast.error(\"Template name is required\"); return; } const template: QuickTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Template name is required",
      "line": 248,
      "column": 19,
      "context": "createTemplate = () => { if (!newTemplate.name?.trim()) { toast.error(\"Template name is required\"); return; } const template: QuickTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Template created successfully",
      "line": 275,
      "column": 19,
      "context": "false, usageCount: 0 }); setIsCreating(false); toast.success(\"Template created successfully\"); }; const getCategoryColor = (category: st"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Template created successfully",
      "line": 275,
      "column": 19,
      "context": "false, usageCount: 0 }); setIsCreating(false); toast.success(\"Template created successfully\"); }; const getCategoryColor = (category: st"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Quick Entry Templates",
      "line": 303,
      "column": 13,
      "context": "center gap-2\"> <Zap className=\"h-5 w-5 text-primary\" /> Quick Entry Templates </CardTitle> <Dialog open={isCreating}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "New Template",
      "line": 309,
      "column": 17,
      "context": "nt=\"outline\"> <Plus className=\"h-4 w-4 mr-2\" /> New Template </Button> </DialogTrigger> <D"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Quick Entry Template",
      "line": 314,
      "column": 30,
      "context": "className=\"max-w-md\"> <DialogHeader> <DialogTitle>Create Quick Entry Template</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Template Name",
      "line": 318,
      "column": 58,
      "context": "<div> <label className=\"text-sm font-medium\">Template Name</label> <Input placeholder=\""
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "e.g., Sensory Overload Response",
      "line": 320,
      "column": 33,
      "context": ">Template Name</label> <Input placeholder=\"e.g., Sensory Overload Response\" value={newTemplate.name ||"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Description",
      "line": 326,
      "column": 58,
      "context": "<div> <label className=\"text-sm font-medium\">Description</label> <Textarea placeholder="
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Brief description of when to use this template",
      "line": 328,
      "column": 33,
      "context": "Description</label> <Textarea placeholder=\"Brief description of when to use this template\" value={newT"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 334,
      "column": 58,
      "context": "<div> <label className=\"text-sm font-medium\">Category</label> <Select value={newTemplat"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Morning",
      "line": 343,
      "column": 51,
      "context": "<SelectContent> <SelectItem value=\"morning\">Morning</SelectItem> <SelectItem value=\"transition\">Transi"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Transition",
      "line": 344,
      "column": 54,
      "context": "ning\">Morning</SelectItem> <SelectItem value=\"transition\">Transition</SelectItem> <SelectItem value=\"learning\">Learn"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Learning",
      "line": 345,
      "column": 52,
      "context": "ion\">Transition</SelectItem> <SelectItem value=\"learning\">Learning</SelectItem> <SelectItem value=\"break\">Break</Sel"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Break",
      "line": 346,
      "column": 49,
      "context": "learning\">Learning</SelectItem> <SelectItem value=\"break\">Break</SelectItem> <SelectItem value=\"afternoon\">Afternoon"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Afternoon",
      "line": 347,
      "column": 53,
      "context": "=\"break\">Break</SelectItem> <SelectItem value=\"afternoon\">Afternoon</SelectItem> <SelectItem value=\"custom\">Custom</"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Custom",
      "line": 348,
      "column": 50,
      "context": "ernoon\">Afternoon</SelectItem> <SelectItem value=\"custom\">Custom</SelectItem> </SelectContent> </Sel"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 354,
      "column": 21,
      "context": "ton variant=\"outline\" onClick={() => setIsCreating(false)}> Cancel </Button> <Button onClick={createTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Template",
      "line": 357,
      "column": 21,
      "context": "Button> <Button onClick={createTemplate}> Create Template </Button> </div>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "more",
      "line": 404,
      "column": 59,
      "context": "className=\"text-xs\"> +{template.emotions.length - 2} more </Badge> )}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Apply Template",
      "line": 416,
      "column": 23,
      "context": "className=\"flex-1 mr-2\" > Apply Template </Button>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No quick entry templates yet",
      "line": 447,
      "column": 16,
      "context": "<Zap className=\"h-12 w-12 mx-auto mb-3 opacity-50\" /> <p>No quick entry templates yet</p> <p className=\"text-sm\">Create templ"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create templates for common tracking scenarios",
      "line": 448,
      "column": 36,
      "context": "<p>No quick entry templates yet</p> <p className=\"text-sm\">Create templates for common tracking scenarios</p> </div> )}"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid date range selected",
      "line": 103,
      "column": 19,
      "context": "if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) { toast.error('Invalid date range selected'); return null; } if (startDate"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Invalid date range selected",
      "line": 103,
      "column": 19,
      "context": "if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) { toast.error('Invalid date range selected'); return null; } if (startDate"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Start date must be before end date",
      "line": 108,
      "column": 19,
      "context": "return null; } if (startDate > endDate) { toast.error('Start date must be before end date'); return null; } // Filter d"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Start date must be before end date",
      "line": 108,
      "column": 19,
      "context": "return null; } if (startDate > endDate) { toast.error('Start date must be before end date'); return null; } // Filter d"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Report generated successfully!",
      "line": 411,
      "column": 19,
      "context": "setTimeout(() => { printWindow.print(); }, 1000); toast.success(\"Report generated successfully!\"); }; const exportCSV = () => { const r"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Report generated successfully!",
      "line": 411,
      "column": 19,
      "context": "setTimeout(() => { printWindow.print(); }, 1000); toast.success(\"Report generated successfully!\"); }; const exportCSV = () => { const r"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "CSV exported successfully!",
      "line": 458,
      "column": 19,
      "context": "ace(/\\s+/g, '_')}_${format(new Date(), 'yyyy-MM-dd')}.csv`); toast.success(\"CSV exported successfully!\"); }; return ( <div className=\"space-y-4\">"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "CSV exported successfully!",
      "line": 458,
      "column": 19,
      "context": "ace(/\\s+/g, '_')}_${format(new Date(), 'yyyy-MM-dd')}.csv`); toast.success(\"CSV exported successfully!\"); }; return ( <div className=\"space-y-4\">"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reports & Documentation",
      "line": 465,
      "column": 49,
      "context": "justify-between\"> <div> <h3 className=\"text-lg font-semibold\">Reports & Documentation</h3> <p className=\"text-muted-foreground\">Gene"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Generate comprehensive reports for IEP meetings and progress tracking",
      "line": 466,
      "column": 48,
      "context": "ld\">Reports & Documentation</h3> <p className=\"text-muted-foreground\">Generate comprehensive reports for IEP meetings and progress tracking</p>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Report",
      "line": 472,
      "column": 15,
      "context": "nt-dyslexia\"> <FileText className=\"h-4 w-4 mr-2\" /> Create Report </Button> </DialogTrigger> <Dialog"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Report Builder",
      "line": 477,
      "column": 28,
      "context": "-[80vh] overflow-y-auto\"> <DialogHeader> <DialogTitle>Report Builder</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Report Template",
      "line": 483,
      "column": 24,
      "context": "{/* Template Selection */} <div> <Label>Report Template</Label> <Select value={selectedTemplate} onValue"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Report Title",
      "line": 504,
      "column": 48,
      "context": "-2 gap-4\"> <div> <Label htmlFor=\"reportTitle\">Report Title</Label> <Input id=\"reportTitl"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reporting Teacher",
      "line": 512,
      "column": 44,
      "context": "</div> <div> <Label htmlFor=\"teacher\">Reporting Teacher</Label> <Input id=\"teach"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Teacher name",
      "line": 517,
      "column": 33,
      "context": "...prev, reportingTeacher: e.target.value }))} placeholder=\"Teacher name\" /> </div> </div>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Report Period",
      "line": 524,
      "column": 24,
      "context": "v> {/* Date Range */} <div> <Label>Report Period</Label> <div className=\"grid grid-cols-2 gap-4 mt-"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start Date",
      "line": 527,
      "column": 68,
      "context": "<div> <Label htmlFor=\"startDate\" className=\"text-sm\">Start Date</Label> <Input id=\"startDat"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "End Date",
      "line": 539,
      "column": 66,
      "context": "<div> <Label htmlFor=\"endDate\" className=\"text-sm\">End Date</Label> <Input id=\"endDate\""
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Report Sections",
      "line": 555,
      "column": 24,
      "context": "div> {/* Sections */} <div> <Label>Report Sections</Label> <div className=\"grid grid-cols-2 gap-2 m"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Include charts and visualizations",
      "line": 596,
      "column": 50,
      "context": "cked }))} /> <Label htmlFor=\"includeCharts\">Include charts and visualizations</Label> </div>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Include raw data tables",
      "line": 604,
      "column": 51,
      "context": "ked }))} /> <Label htmlFor=\"includeRawData\">Include raw data tables</Label> </div> </div>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Additional Notes",
      "line": 610,
      "column": 46,
      "context": "stom Notes */} <div> <Label htmlFor=\"customNotes\">Additional Notes</Label> <Textarea id=\"customN"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Add any additional observations or notes...",
      "line": 615,
      "column": 31,
      "context": "v => ({ ...prev, customNotes: e.target.value }))} placeholder=\"Add any additional observations or notes...\" rows={3}"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export CSV",
      "line": 624,
      "column": 19,
      "context": "CSV}> <Download className=\"h-4 w-4 mr-2\" /> Export CSV </Button> <Button onClick={generatePD"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Generate PDF",
      "line": 628,
      "column": 19,
      "context": "ePDF}> <Printer className=\"h-4 w-4 mr-2\" /> Generate PDF </Button> </div> </div>"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sections",
      "line": 650,
      "column": 44,
      "context": "riant=\"outline\" className=\"text-xs\"> {template.sections.length} sections </Badge> </CardContent> </Card>"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Manual intensity input",
      "line": 185,
      "column": 26,
      "context": "className=\"w-16 px-2 py-1 mt-2 rounded border\" aria-label=\"Manual intensity input\" /> </div> )} {/*"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Body Location (Optional)",
      "line": 193,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Body Location (Optional)</h3> <div className=\"flex flex-wrap gap-2\">"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Coping Strategies Used",
      "line": 222,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Coping Strategies Used</h3> <div className=\"flex gap-2 mb-2\">"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Add a coping strategy...",
      "line": 229,
      "column": 29,
      "context": "=> e.key === 'Enter' && handleAddCopingStrategy()} placeholder=\"Add a coping strategy...\" className=\"flex-1 px-3 py-2 border bo"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 260,
      "column": 30,
      "context": "eRemoveCopingStrategy(strategy)} > {strategy} × </Badge> ))} </div> </div>"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Miljø (Valgfritt)",
      "line": 269,
      "column": 68,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Miljø (Valgfritt)</h3> <input type=\"text\" valu"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "f.eks. Klasserom, Lekeplass, Bibliotek...",
      "line": 274,
      "column": 25,
      "context": "onChange={(e) => setEnvironment(e.target.value)} placeholder=\"f.eks. Klasserom, Lekeplass, Bibliotek...\" className=\"w-full px-3 p"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Ytterligere observasjoner om den sensoriske responsen...",
      "line": 285,
      "column": 25,
      "context": "onChange={(e) => setNotes(e.target.value)} placeholder=\"Ytterligere observasjoner om den sensoriske responsen...\" className"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Old data cleared successfully",
      "line": 33,
      "column": 21,
      "context": "=> { try { storageUtils.clearOldTrackingData(30); toast.success('Old data cleared successfully'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Old data cleared successfully",
      "line": 33,
      "column": 21,
      "context": "=> { try { storageUtils.clearOldTrackingData(30); toast.success('Old data cleared successfully'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear old tracking data",
      "line": 36,
      "column": 20,
      "context": "successfully'); refreshStats(); } catch (error) { logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear old data",
      "line": 37,
      "column": 19,
      "context": "logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear old data'); } }; const handleClearNonEssential = () =>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear old data",
      "line": 37,
      "column": 19,
      "context": "logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear old data'); } }; const handleClearNonEssential = () =>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Non-essential data cleared",
      "line": 44,
      "column": 21,
      "context": "=> { try { storageUtils.clearNonEssentialData(); toast.success('Non-essential data cleared'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Non-essential data cleared",
      "line": 44,
      "column": 21,
      "context": "=> { try { storageUtils.clearNonEssentialData(); toast.success('Non-essential data cleared'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear non-essential data",
      "line": 47,
      "column": 20,
      "context": "data cleared'); refreshStats(); } catch (error) { logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear non-essential data",
      "line": 48,
      "column": 19,
      "context": "logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear non-essential data'); } }; /** * Handle clearing al"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear non-essential data",
      "line": 48,
      "column": 19,
      "context": "logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear non-essential data'); } }; /** * Handle clearing al"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: confirm()",
      "value": "Are you sure you want to clear ALL data? This cannot be undone!",
      "line": 60,
      "column": 40,
      "context": "using a custom modal component try { const confirmed = window.confirm('Are you sure you want to clear ALL data? This cannot be undone!'); if (co"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "All data cleared",
      "line": 64,
      "column": 25,
      "context": ") { try { dataStorage.clearAllData(); toast.success('All data cleared'); // Use window.location.replace for better history"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "All data cleared",
      "line": 64,
      "column": 25,
      "context": ") { try { dataStorage.clearAllData(); toast.success('All data cleared'); // Use window.location.replace for better history"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear all data",
      "line": 68,
      "column": 24,
      "context": "window.location.replace('/'); } catch (error) { logger.error('Failed to clear all data', error); toast.error('Failed to clear all d"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear all data",
      "line": 69,
      "column": 23,
      "context": "logger.error('Failed to clear all data', error); toast.error('Failed to clear all data'); } } } catch (error) { // Ha"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear all data",
      "line": 69,
      "column": 23,
      "context": "logger.error('Failed to clear all data', error); toast.error('Failed to clear all data'); } } } catch (error) { // Ha"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Confirmation dialog failed",
      "line": 74,
      "column": 20,
      "context": "s where confirm might fail (e.g., in some test environments) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirma"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Could not show confirmation dialog",
      "line": 75,
      "column": 19,
      "context": "nts) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirmation dialog'); } }; const formatBytes = (bytes:"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Could not show confirmation dialog",
      "line": 75,
      "column": 19,
      "context": "nts) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirmation dialog'); } }; const formatBytes = (bytes:"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage Management",
      "line": 94,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Database className=\"h-5 w-5\" /> Storage Management </CardTitle> <CardDescription> Mana"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Manage your local storage to ensure smooth operation",
      "line": 97,
      "column": 11,
      "context": "Storage Management </CardTitle> <CardDescription> Manage your local storage to ensure smooth operation </CardDescription>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage Usage",
      "line": 103,
      "column": 44,
      "context": "{/* Storage Usage */} <div> <h3 className=\"font-medium mb-2\">Storage Usage</h3> <div className=\"space-y-2\"> <div classN"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Used",
      "line": 106,
      "column": 21,
      "context": "<div className=\"flex justify-between text-sm\"> <span>Used</span> <span>{formatBytes(storageInfo.used)} / ~5 MB</span>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "/ ~5 MB",
      "line": 107,
      "column": 53,
      "context": "<span>Used</span> <span>{formatBytes(storageInfo.used)} / ~5 MB</span> </div> <div className=\"w-full bg-gray-200"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Statistics",
      "line": 123,
      "column": 44,
      "context": "{/* Storage Stats */} <div> <h3 className=\"font-medium mb-2\">Data Statistics</h3> <div className=\"grid grid-cols-2 gap-2 text-sm\">"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students:",
      "line": 125,
      "column": 18,
      "context": "h3> <div className=\"grid grid-cols-2 gap-2 text-sm\"> <div>Students: {stats.studentsCount}</div> <div>Entries: {stats.entriesCo"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Entries:",
      "line": 126,
      "column": 18,
      "context": "xt-sm\"> <div>Students: {stats.studentsCount}</div> <div>Entries: {stats.entriesCount}</div> <div>Goals: {stats.goalsCount}</"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goals:",
      "line": 127,
      "column": 18,
      "context": "nt}</div> <div>Entries: {stats.entriesCount}</div> <div>Goals: {stats.goalsCount}</div> <div>Alerts: {stats.alertsCount}</di"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alerts:",
      "line": 128,
      "column": 18,
      "context": "sCount}</div> <div>Goals: {stats.goalsCount}</div> <div>Alerts: {stats.alertsCount}</div> </div> </div> {/* W"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear data older than 30 days",
      "line": 154,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear data older than 30 days </Button> <Button"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear non-essential data",
      "line": 162,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear non-essential data </Button> <Button varia"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear ALL data (irreversible)",
      "line": 170,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear ALL data (irreversible) </Button> </div> {stora"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage is healthy with sufficient space available.",
      "line": 178,
      "column": 15,
      "context": "CheckCircle className=\"h-4 w-4\" /> <AlertDescription> Storage is healthy with sufficient space available. </AlertDescripti"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hovedseksjoner",
      "line": 109,
      "column": 13,
      "context": "foreground text-xs font-medium uppercase tracking-wider px-3 py-2\"> Hovedseksjoner </SidebarGroupLabel> <SidebarGroupContent>"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Verktøy",
      "line": 137,
      "column": 13,
      "context": "foreground text-xs font-medium uppercase tracking-wider px-3 py-2\"> Verktøy </SidebarGroupLabel> <SidebarGroupContent>"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Testing",
      "line": 165,
      "column": 13,
      "context": "foreground text-xs font-medium uppercase tracking-wider px-3 py-2\"> Testing </SidebarGroupLabel> <SidebarGroupContent>"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "science",
      "line": 178,
      "column": 62,
      "context": "> <span className=\"material-icons text-base\">science</span> {state !== \"collapsed\" && ("
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data",
      "line": 180,
      "column": 52,
      "context": "{state !== \"collapsed\" && ( <span className=\"text-sm ml-3\">Mock Data</span> )} </SidebarMenuButton>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "System tests completed successfully",
      "line": 206,
      "column": 21,
      "context": "ilable\" }; setTestResults([...results]); toast.success(\"System tests completed successfully\"); } catch (error) { logge"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "System tests completed successfully",
      "line": 206,
      "column": 21,
      "context": "ilable\" }; setTestResults([...results]); toast.success(\"System tests completed successfully\"); } catch (error) { logge"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "System test error",
      "line": 209,
      "column": 20,
      "context": "tests completed successfully\"); } catch (error) { logger.error('System test error', { error }); results.push({ name: \"Test Error\""
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Some tests failed",
      "line": 216,
      "column": 19,
      "context": "nknown error'}` }); setTestResults([...results]); toast.error(\"Some tests failed\"); } finally { setIsRunningTests(false); } };"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Some tests failed",
      "line": 216,
      "column": 19,
      "context": "nknown error'}` }); setTestResults([...results]); toast.error(\"Some tests failed\"); } finally { setIsRunningTests(false); } };"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Analytics cache cleared successfully",
      "line": 245,
      "column": 19,
      "context": ") => { analyticsWorker.clearCache(); uiCache.clear(); toast.success(\"Analytics cache cleared successfully\"); }, [analyticsWorker, uiCache]); co"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Analytics cache cleared successfully",
      "line": 245,
      "column": 19,
      "context": ") => { analyticsWorker.clearCache(); uiCache.clear(); toast.success(\"Analytics cache cleared successfully\"); }, [analyticsWorker, uiCache]); co"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "System Testing & Debug Panel",
      "line": 260,
      "column": 13,
      "context": "=\"flex items-center gap-2\"> <Bug className=\"h-5 w-5\" /> System Testing & Debug Panel </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test current system functionality and data integrity",
      "line": 266,
      "column": 15,
      "context": "tween\"> <p className=\"text-sm text-muted-foreground\"> Test current system functionality and data integrity </p>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Running Tests...",
      "line": 277,
      "column": 19,
      "context": "<RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" /> Running Tests... </> ) : ( <>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Run System Tests",
      "line": 282,
      "column": 19,
      "context": "<> <TestTube className=\"h-4 w-4 mr-2\" /> Run System Tests </> )} </Button>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test Results:",
      "line": 290,
      "column": 51,
      "context": "<div className=\"space-y-3\"> <h4 className=\"text-sm font-medium\">Test Results:</h4> {testResults.map((result, index) => ("
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Quick Stats:",
      "line": 309,
      "column": 54,
      "context": "4 border-t border-border\"> <h4 className=\"text-sm font-medium mb-2\">Quick Stats:</h4> <div className=\"grid grid-cols-3 gap-3 text-center"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students",
      "line": 313,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Students</p> </div> <div> <Database"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Entries",
      "line": 317,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Entries</p> </div> <div> <BarChart3"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics",
      "line": 321,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Analytics</p> </div> </div> </div> <"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Cache Management",
      "line": 333,
      "column": 13,
      "context": "ex items-center gap-2\"> <Archive className=\"h-5 w-5\" /> Analytics Cache Management </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Hit Rate",
      "line": 342,
      "column": 57,
      "context": "enter justify-between\"> <span className=\"text-sm font-medium\">Cache Hit Rate</span> <div className=\"flex items-center gap-2\""
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Size",
      "line": 351,
      "column": 69,
      "context": "flex-col\"> <span className=\"text-xs text-muted-foreground\">Cache Size</span> <span className=\"text-lg font-semibold\">{c"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Memory Usage",
      "line": 355,
      "column": 69,
      "context": "flex-col\"> <span className=\"text-xs text-muted-foreground\">Memory Usage</span> <span className=\"text-lg font-semibold\">"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hits",
      "line": 366,
      "column": 66,
      "context": "tats.hits}</p> <p className=\"text-xs text-muted-foreground\">Hits</p> </div> <div className=\"text-center"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Misses",
      "line": 371,
      "column": 66,
      "context": "ts.misses}</p> <p className=\"text-xs text-muted-foreground\">Misses</p> </div> <div className=\"text-cente"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sets",
      "line": 376,
      "column": 66,
      "context": "tats.sets}</p> <p className=\"text-xs text-muted-foreground\">Sets</p> </div> </div> </div>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Actions",
      "line": 383,
      "column": 53,
      "context": "t border-border space-y-3\"> <h4 className=\"text-sm font-medium\">Cache Actions</h4> <div className=\"flex gap-2\">"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Cache",
      "line": 392,
      "column": 21,
      "context": "> <Trash2 className=\"h-4 w-4 mr-2\" /> Clear All Cache </Button> <Button"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clean Expired",
      "line": 401,
      "column": 21,
      "context": "<RefreshCw className=\"h-4 w-4 mr-2\" /> Clean Expired </Button> </div>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Cache TTL: 5 minutes",
      "line": 406,
      "column": 22,
      "context": "<div className=\"text-xs text-muted-foreground\"> <p>• Cache TTL: 5 minutes</p> <p>• Eviction: LRU (Least Recently"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Eviction: LRU (Least Recently Used)",
      "line": 407,
      "column": 22,
      "context": "reground\"> <p>• Cache TTL: 5 minutes</p> <p>• Eviction: LRU (Least Recently Used)</p> <p>• Invalidations:"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Invalidations:",
      "line": 408,
      "column": 22,
      "context": "<p>• Eviction: LRU (Least Recently Used)</p> <p>• Invalidations: {cacheStats.invalidations || 0}</p> </div>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Testing & Development Tools",
      "line": 16,
      "column": 44,
      "context": "v className=\"space-y-6\"> <div> <h2 className=\"text-2xl font-bold\">Testing & Development Tools</h2> <p className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tools for testing pattern analysis features and debugging data issues",
      "line": 18,
      "column": 11,
      "context": "Development Tools</h2> <p className=\"text-muted-foreground\"> Tools for testing pattern analysis features and debugging data issues </"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data Generator",
      "line": 28,
      "column": 15,
      "context": "p-2\"> <Database className=\"h-5 w-5 text-primary\" /> Mock Data Generator </CardTitle> </CardHeader> <"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load realistic test data to explore pattern analysis features",
      "line": 33,
      "column": 15,
      "context": "t> <p className=\"text-sm text-muted-foreground mb-4\"> Load realistic test data to explore pattern analysis features </p>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Mock Data",
      "line": 39,
      "column": 19,
      "context": "-90\"> <Database className=\"h-4 w-4 mr-2\" /> Load Mock Data </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data for Testing & Analysis",
      "line": 44,
      "column": 32,
      "context": "overflow-y-auto\"> <DialogHeader> <DialogTitle>Mock Data for Testing & Analysis</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Debug Panel",
      "line": 57,
      "column": 15,
      "context": "er gap-2\"> <Bug className=\"h-5 w-5 text-primary\" /> Debug Panel </CardTitle> </CardHeader> <CardCont"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced debugging and data inspection tools",
      "line": 62,
      "column": 15,
      "context": "t> <p className=\"text-sm text-muted-foreground mb-4\"> Advanced debugging and data inspection tools </p> <Dialo"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Open Debug Panel",
      "line": 68,
      "column": 19,
      "context": "=\"w-full\"> <Bug className=\"h-4 w-4 mr-2\" /> Open Debug Panel </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Debug & Data Inspection",
      "line": 73,
      "column": 32,
      "context": "overflow-y-auto\"> <DialogHeader> <DialogTitle>Debug & Data Inspection</DialogTitle> </DialogHeader>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis Testing Guide",
      "line": 86,
      "column": 15,
      "context": "gap-2\"> <Beaker className=\"h-5 w-5 text-primary\" /> Pattern Analysis Testing Guide </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "To test pattern analysis features effectively:",
      "line": 92,
      "column": 17,
      "context": "4\"> <p className=\"text-sm text-muted-foreground\"> To test pattern analysis features effectively: </p>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Requirements:",
      "line": 96,
      "column": 60,
      "context": "<div> <h4 className=\"font-medium text-sm mb-2\">Data Requirements:</h4> <ul className=\"text-xs text-muted-fore"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• At least 10 tracking entries for basic patterns",
      "line": 98,
      "column": 25,
      "context": "ul className=\"text-xs text-muted-foreground space-y-1\"> <li>• At least 10 tracking entries for basic patterns</li> <li>•"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• 30+ entries for correlation analysis",
      "line": 99,
      "column": 25,
      "context": ">• At least 10 tracking entries for basic patterns</li> <li>• 30+ entries for correlation analysis</li> <li>• 90+ entrie"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• 90+ entries for predictive insights",
      "line": 100,
      "column": 25,
      "context": "<li>• 30+ entries for correlation analysis</li> <li>• 90+ entries for predictive insights</li> <li>• Multiple st"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Multiple students for comparative analysis",
      "line": 101,
      "column": 25,
      "context": "<li>• 90+ entries for predictive insights</li> <li>• Multiple students for comparative analysis</li> </ul>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Features to Test:",
      "line": 105,
      "column": 60,
      "context": "<div> <h4 className=\"font-medium text-sm mb-2\">Features to Test:</h4> <ul className=\"text-xs text-muted-foreg"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion trend analysis",
      "line": 107,
      "column": 25,
      "context": "ul className=\"text-xs text-muted-foreground space-y-1\"> <li>• Emotion trend analysis</li> <li>• Sensory correlation matr"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory correlation matrices",
      "line": 108,
      "column": 25,
      "context": "> <li>• Emotion trend analysis</li> <li>• Sensory correlation matrices</li> <li>• Environmental impa"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Environmental impact patterns",
      "line": 109,
      "column": 25,
      "context": "<li>• Sensory correlation matrices</li> <li>• Environmental impact patterns</li> <li>• Anomaly detection"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Anomaly detection alerts",
      "line": 110,
      "column": 25,
      "context": "<li>• Environmental impact patterns</li> <li>• Anomaly detection alerts</li> </ul> </div>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Timeline Visualization",
      "line": 520,
      "column": 13,
      "context": "flex items-center gap-2\"> <Clock className=\"h-5 w-5\" /> Timeline Visualization </CardTitle> <div className=\"flex ite"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Live",
      "line": 525,
      "column": 17,
      "context": "<Badge variant=\"default\" className=\"animate-pulse\"> Live </Badge> )} <Button siz"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 605,
      "column": 32,
      "context": "<span className=\"text-sm text-muted-foreground\"> {playbackSpeed}x </span> </div> {/* Stream visibility to"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 619,
      "column": 17,
      "context": "> <Brain className=\"h-4 w-4 mr-1\" /> Emotions </Toggle> <Toggle size=\"sm\""
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 629,
      "column": 17,
      "context": "> <Eye className=\"h-4 w-4 mr-1\" /> Sensory </Toggle> <Toggle size=\"sm\""
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomalies",
      "line": 639,
      "column": 17,
      "context": "> <AlertCircle className=\"h-4 w-4 mr-1\" /> Anomalies </Toggle> </div> </div>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "minutes",
      "line": 648,
      "column": 65,
      "context": "=\"font-medium\"> {differenceInMinutes(timeRange[1], timeRange[0])} minutes </span> <span>{format(timeRange[1], 'MMM dd, yyy"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Streams",
      "line": 728,
      "column": 54,
      "context": "rounded-lg p-3 shadow-lg\"> <h4 className=\"font-medium text-sm mb-2\">Data Streams</h4> <div className=\"space-y-1\"> {dataStr"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Events:",
      "line": 745,
      "column": 18,
      "context": "-3 shadow-lg\"> <div className=\"text-xs space-y-1\"> <p>Events: {timelineEvents.length}</p> <p>Zoom: {Math.round(zoomLevel"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Zoom:",
      "line": 746,
      "column": 18,
      "context": "ace-y-1\"> <p>Events: {timelineEvents.length}</p> <p>Zoom: {Math.round(zoomLevel * 100)}%</p> {brushSelection && ("
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Selection:",
      "line": 748,
      "column": 20,
      "context": "nd(zoomLevel * 100)}%</p> {brushSelection && ( <p>Selection: {differenceInMinutes(brushSelection[1], brushSelection[0])} min</p>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "min",
      "line": 748,
      "column": 91,
      "context": "<p>Selection: {differenceInMinutes(brushSelection[1], brushSelection[0])} min</p> )} </div> </div> </div>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 55,
      "column": 13,
      "context": "ted-foreground hover:text-foreground transition-colors\" > × </button> </div> <p className=\"font-medium\">{point.l"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "X:",
      "line": 60,
      "column": 14,
      "context": "<div className=\"text-sm text-muted-foreground mt-1 space-y-1\"> <p>X: {point.x.toFixed(2)}</p> <p>Y: {point.y.toFixed(2)}</p> <"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Y:",
      "line": 61,
      "column": 14,
      "context": "reground mt-1 space-y-1\"> <p>X: {point.x.toFixed(2)}</p> <p>Y: {point.y.toFixed(2)}</p> <p>Z: {point.z.toFixed(2)}</p> {"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Z:",
      "line": 62,
      "column": 14,
      "context": "{point.x.toFixed(2)}</p> <p>Y: {point.y.toFixed(2)}</p> <p>Z: {point.z.toFixed(2)}</p> {point.intensity && <p>Intensity: {point.i"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity:",
      "line": 63,
      "column": 34,
      "context": "}</p> <p>Z: {point.z.toFixed(2)}</p> {point.intensity && <p>Intensity: {point.intensity}</p>} </div> </div> </Html> ); }"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "3D Correlation Visualization",
      "line": 334,
      "column": 11,
      "context": "Name=\"flex items-center gap-2\"> <Eye className=\"h-5 w-5\" /> 3D Correlation Visualization </CardTitle> </CardHeader> <Car"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "X Axis",
      "line": 342,
      "column": 65,
      "context": "<div> <label className=\"text-sm font-medium mb-1 block\">X Axis</label> <Select value={xAxis} onValueChange={setXAxis}>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Y Axis",
      "line": 358,
      "column": 65,
      "context": "<div> <label className=\"text-sm font-medium mb-1 block\">Y Axis</label> <Select value={yAxis} onValueChange={setYAxis}>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Z Axis",
      "line": 374,
      "column": 65,
      "context": "<div> <label className=\"text-sm font-medium mb-1 block\">Z Axis</label> <Select value={zAxis} onValueChange={setZAxis}>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Color By",
      "line": 392,
      "column": 65,
      "context": "<div> <label className=\"text-sm font-medium mb-1 block\">Color By</label> <Select value={colorBy} onValueChange={setColorBy"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 398,
      "column": 48,
      "context": "<SelectContent> <SelectItem value=\"category\">Category</SelectItem> <SelectItem value=\"intensity\">Intensity<"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity",
      "line": 399,
      "column": 49,
      "context": "category\">Category</SelectItem> <SelectItem value=\"intensity\">Intensity</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Filter Category",
      "line": 405,
      "column": 65,
      "context": "<div> <label className=\"text-sm font-medium mb-1 block\">Filter Category</label> <Select value={filterCategory} onValueChan"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All",
      "line": 411,
      "column": 43,
      "context": "gger> <SelectContent> <SelectItem value=\"all\">All</SelectItem> <SelectItem value=\"emotion\">Emotions</SelectI"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 412,
      "column": 47,
      "context": "Item value=\"all\">All</SelectItem> <SelectItem value=\"emotion\">Emotions</SelectItem> <SelectItem value=\"sensory\">Sensory</Sel"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 413,
      "column": 47,
      "context": "e=\"emotion\">Emotions</SelectItem> <SelectItem value=\"sensory\">Sensory</SelectItem> <SelectItem value=\"environmental\">Environ"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental",
      "line": 414,
      "column": 53,
      "context": "nsory\">Sensory</SelectItem> <SelectItem value=\"environmental\">Environmental</SelectItem> </SelectContent> </Sele"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Point Size:",
      "line": 421,
      "column": 17,
      "context": "<label className=\"text-sm font-medium mb-1 block\"> Point Size: {pointSize.toFixed(2)} </label> <Slider"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Legend",
      "line": 503,
      "column": 54,
      "context": "rounded-lg p-3 shadow-lg\"> <h4 className=\"font-medium text-sm mb-2\">Legend</h4> <div className=\"space-y-1\"> {colorBy === '"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 509,
      "column": 47,
      "context": "h-3 rounded-full bg-[#10B981]\" /> <span className=\"text-xs\">Emotions</span> </div> <div className=\"flex"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 513,
      "column": 47,
      "context": "h-3 rounded-full bg-[#3B82F6]\" /> <span className=\"text-xs\">Sensory</span> </div> <div className=\"flex i"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental",
      "line": 517,
      "column": 47,
      "context": "h-3 rounded-full bg-[#F59E0B]\" /> <span className=\"text-xs\">Environmental</span> </div> </>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Low → High",
      "line": 524,
      "column": 45,
      "context": "a-yellow-500 to-red-500 rounded\" /> <span className=\"text-xs\">Low → High</span> </div> )} </div>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Points:",
      "line": 532,
      "column": 18,
      "context": "-3 shadow-lg\"> <div className=\"text-xs space-y-1\"> <p>Points: {filteredPoints.length}</p> <p>Total Sessions: {trackingEn"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Total Sessions:",
      "line": 533,
      "column": 18,
      "context": "ace-y-1\"> <p>Points: {filteredPoints.length}</p> <p>Total Sessions: {trackingEntries.length}</p> </div> </div>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Interactive Data Analysis -",
      "line": 108,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Activity className=\"h-5 w-5\" /> Interactive Data Analysis - {studentName} {filterCriteria.realtime &&"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Live",
      "line": 112,
      "column": 15,
      "context": "mate-pulse ml-2\"> <Wifi className=\"h-3 w-3 mr-1\" /> Live </Badge> )} </CardTitle> <div classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Visualization controls",
      "line": 116,
      "column": 61,
      "context": "</CardTitle> <div className=\"flex items-center gap-2\" aria-label=\"Visualization controls\"> {/* Guided question chips */} <div"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Open filters panel",
      "line": 153,
      "column": 62,
      "context": "etTrigger asChild> <Button variant=\"outline\" size=\"sm\" aria-label=\"Open filters panel\" title=\"Open filters panel\"> <Filter classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Open filters panel",
      "line": 153,
      "column": 89,
      "context": "<Button variant=\"outline\" size=\"sm\" aria-label=\"Open filters panel\" title=\"Open filters panel\"> <Filter className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Filters",
      "line": 155,
      "column": 17,
      "context": "ers panel\"> <Filter className=\"h-4 w-4 mr-2\" /> Filters {Object.keys(filterCriteria).filter(k =>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 174,
      "column": 21,
      "context": "<Badge variant=\"default\" className=\"ml-1\"> Active </Badge> )} </Button>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced Filters",
      "line": 181,
      "column": 29,
      "context": "-[400px] sm:w-[540px]\"> <SheetHeader> <SheetTitle>Advanced Filters</SheetTitle> <SheetDescription>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure multi-dimensional filters for your data analysis",
      "line": 183,
      "column": 19,
      "context": "anced Filters</SheetTitle> <SheetDescription> Configure multi-dimensional filters for your data analysis </She"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Select layout mode",
      "line": 199,
      "column": 62,
      "context": "nuTrigger asChild> <Button variant=\"outline\" size=\"sm\" aria-label=\"Select layout mode\" title=\"Select layout mode\"> {layoutMode ==="
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Select layout mode",
      "line": 199,
      "column": 89,
      "context": "<Button variant=\"outline\" size=\"sm\" aria-label=\"Select layout mode\" title=\"Select layout mode\"> {layoutMode === 'grid' && <Grid3x3 classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Layout",
      "line": 204,
      "column": 17,
      "context": "tMode === 'dashboard' && <Activity className=\"h-4 w-4 mr-2\" />} Layout </Button> </DropdownMenuTrigger> <D"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dashboard",
      "line": 210,
      "column": 17,
      "context": "board')}> <Activity className=\"h-4 w-4 mr-2\" /> Dashboard </DropdownMenuItem> <DropdownMenuItem onCl"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Grid View",
      "line": 214,
      "column": 17,
      "context": "('grid')}> <Grid3x3 className=\"h-4 w-4 mr-2\" /> Grid View </DropdownMenuItem> <DropdownMenuItem onCl"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Focus Mode",
      "line": 218,
      "column": 17,
      "context": "e('focus')}> <Focus className=\"h-4 w-4 mr-2\" /> Focus Mode </DropdownMenuItem> <DropdownMenuItem onC"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Comparison",
      "line": 222,
      "column": 17,
      "context": "arison')}> <Columns className=\"h-4 w-4 mr-2\" /> Comparison </DropdownMenuItem> </DropdownMenuContent>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "View options",
      "line": 229,
      "column": 62,
      "context": "nuTrigger asChild> <Button variant=\"outline\" size=\"sm\" aria-label=\"View options\" title=\"View options\"> <Settings className=\"h-4 w-"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "View options",
      "line": 229,
      "column": 83,
      "context": "<Button variant=\"outline\" size=\"sm\" aria-label=\"View options\" title=\"View options\"> <Settings className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "View",
      "line": 231,
      "column": 17,
      "context": "options\"> <Settings className=\"h-4 w-4 mr-2\" /> View </Button> </DropdownMenuTrigger> <Dro"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Emotional energy vs Sensory load (XY)",
      "line": 241,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('xy')}>2D: Emotional energy vs Sensory load (XY)</DropdownMenuItem> <"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Emotional energy vs Time (XZ)",
      "line": 242,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('xz')}>2D: Emotional energy vs Time (XZ)</DropdownMenuItem> <Dropdown"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Sensory load vs Time (YZ)",
      "line": 243,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('yz')}>2D: Sensory load vs Time (YZ)</DropdownMenuItem> </>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Picture-in-Picture",
      "line": 256,
      "column": 17,
      "context": "<PictureInPicture2 className=\"h-4 w-4 mr-2\" /> Picture-in-Picture </DropdownMenuItem> <DropdownMenu"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear Highlights",
      "line": 263,
      "column": 17,
      "context": "}}> <RefreshCw className=\"h-4 w-4 mr-2\" /> Clear Highlights </DropdownMenuItem> </DropdownMenuCon"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Export analytics",
      "line": 270,
      "column": 85,
      "context": "<Button variant=\"outline\" size=\"sm\" disabled={isExporting} aria-label=\"Export analytics\" title=\"Export analytics\"> <Download className"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Export analytics",
      "line": 270,
      "column": 110,
      "context": "=\"outline\" size=\"sm\" disabled={isExporting} aria-label=\"Export analytics\" title=\"Export analytics\"> <Download className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as PDF",
      "line": 281,
      "column": 17,
      "context": "> <FileText className=\"h-4 w-4 mr-2\" /> Export as PDF </DropdownMenuItem> <DropdownMenuItem"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as CSV",
      "line": 288,
      "column": 17,
      "context": "> <FileSpreadsheet className=\"h-4 w-4 mr-2\" /> Export as CSV </DropdownMenuItem> <DropdownMenuItem"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as JSON",
      "line": 295,
      "column": 17,
      "context": "> <FileJson className=\"h-4 w-4 mr-2\" /> Export as JSON </DropdownMenuItem> </DropdownMenuConte"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Chart Type",
      "line": 304,
      "column": 52,
      "context": "<div className=\"space-y-2\"> <label className=\"text-sm font-medium\">Chart Type</label> <Select value={selectedChartType} onValueChange={"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Line Chart",
      "line": 310,
      "column": 42,
      "context": "Trigger> <SelectContent> <SelectItem value=\"line\">Line Chart</SelectItem> <SelectItem value=\"area\">Area Chart</Sel"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Area Chart",
      "line": 311,
      "column": 42,
      "context": "m value=\"line\">Line Chart</SelectItem> <SelectItem value=\"area\">Area Chart</SelectItem> <SelectItem value=\"scatter\">Scatter Plot"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Scatter Plot",
      "line": 312,
      "column": 45,
      "context": "alue=\"area\">Area Chart</SelectItem> <SelectItem value=\"scatter\">Scatter Plot</SelectItem> <SelectItem value=\"composed\">Combined<"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Combined",
      "line": 313,
      "column": 46,
      "context": "scatter\">Scatter Plot</SelectItem> <SelectItem value=\"composed\">Combined</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select Emotions",
      "line": 319,
      "column": 52,
      "context": "<div className=\"space-y-2\"> <label className=\"text-sm font-medium\">Select Emotions</label> <div className=\"grid grid-cols-2 gap-2 w-64"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Time Range",
      "line": 343,
      "column": 52,
      "context": "<div className=\"space-y-2\"> <label className=\"text-sm font-medium\">Time Range</label> <Select value={selectedTimeRange} onValueChange={"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 7 days",
      "line": 349,
      "column": 40,
      "context": "ctTrigger> <SelectContent> <SelectItem value=\"7d\">Last 7 days</SelectItem> <SelectItem value=\"30d\">Last 30 days</S"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 30 days",
      "line": 350,
      "column": 41,
      "context": "tem value=\"7d\">Last 7 days</SelectItem> <SelectItem value=\"30d\">Last 30 days</SelectItem> <SelectItem value=\"90d\">Last 90 days</"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 90 days",
      "line": 351,
      "column": 41,
      "context": "m value=\"30d\">Last 30 days</SelectItem> <SelectItem value=\"90d\">Last 90 days</SelectItem> <SelectItem value=\"all\">All time</Sele"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All time",
      "line": 352,
      "column": 41,
      "context": "m value=\"90d\">Last 90 days</SelectItem> <SelectItem value=\"all\">All time</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Data counts",
      "line": 357,
      "column": 68,
      "context": "</div> <div className=\"flex items-center gap-2 mt-8\" aria-label=\"Data counts\"> <Badge variant=\"outline\" className=\"bg-green-50 text-"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions",
      "line": 359,
      "column": 46,
      "context": "text-green-700 border-green-200\"> {filteredData.emotions.length} emotions </Badge> <Badge variant=\"outline\" className=\"bg"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sensory inputs",
      "line": 362,
      "column": 51,
      "context": "xt-blue-700 border-blue-200\"> {filteredData.sensoryInputs.length} sensory inputs </Badge> <Badge variant=\"outline\" classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sessions",
      "line": 365,
      "column": 53,
      "context": "ple-700 border-purple-200\"> {filteredData.trackingEntries.length} sessions </Badge> {filterCriteria.realtime && ("
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "new",
      "line": 369,
      "column": 45,
      "context": "default\" className=\"bg-orange-500\"> {realtimeData.newDataCount} new </Badge> )} </div> </div>"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete student",
      "line": 52,
      "column": 19,
      "context": "e) { onDelete(student); } } catch (error) { toast.error('Failed to delete student', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to delete student",
      "line": 52,
      "column": 19,
      "context": "e) { onDelete(student); } } catch (error) { toast.error('Failed to delete student', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datainnsamling",
      "line": 169,
      "column": 63,
      "context": "fy-between mb-2\"> <span className=\"text-xs text-muted-foreground\">Datainnsamling</span> <span className=\"text-xs font-medium text-pr"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Denne uken",
      "line": 182,
      "column": 62,
      "context": "iesThisWeek}</div> <div className=\"text-xs text-muted-foreground\">Denne uken</div> </div> <div className=\"text-center p-2"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sist sporet",
      "line": 186,
      "column": 62,
      "context": "TrackedText}</div> <div className=\"text-xs text-muted-foreground\">Sist sporet</div> </div> </div> {/* Action Butt"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Delete Student",
      "line": 231,
      "column": 37,
      "context": "ontent> <AlertDialogHeader> <AlertDialogTitle>Delete Student</AlertDialogTitle> <AlertDialogDescription>"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Are you sure you want to delete",
      "line": 233,
      "column": 21,
      "context": "lertDialogTitle> <AlertDialogDescription> Are you sure you want to delete {student.name}? This will permanently delete all"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "? This will permanently delete all their tracking data, goals, and associated records. This action cannot be undone.",
      "line": 233,
      "column": 67,
      "context": "gDescription> Are you sure you want to delete {student.name}? This will permanently delete all their tracking data, goals, and associated re"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 237,
      "column": 38,
      "context": "eader> <AlertDialogFooter> <AlertDialogCancel>Cancel</AlertDialogCancel> <AlertDialogAction"
    },
    {
      "file": "src/components/ui/PremiumStudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Delete Student",
      "line": 243,
      "column": 21,
      "context": "> <Trash2 className=\"h-4 w-4 mr-2\" /> Delete Student </AlertDialogAction> </AlertDia"
    },
    {
      "file": "src/components/ui/StudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Grade",
      "line": 31,
      "column": 17,
      "context": "&& ( <Badge variant=\"secondary\" className=\"mt-1\"> Grade {student.grade} </Badge> )} </div>"
    },
    {
      "file": "src/components/ui/StudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Added",
      "line": 41,
      "column": 17,
      "context": "t-muted-foreground\"> <Calendar className=\"h-4 w-4\" /> <span>Added {student.createdAt.toLocaleDateString()}</span> </div> <d"
    },
    {
      "file": "src/components/ui/StudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "View Profile",
      "line": 52,
      "column": 13,
      "context": "exia\" > <FileText className=\"h-4 w-4 mr-2\" /> View Profile </Button> <Button size=\"sm\""
    },
    {
      "file": "src/components/ui/StudentCard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Track Now",
      "line": 60,
      "column": 13,
      "context": "90\" > <TrendingUp className=\"h-4 w-4 mr-2\" /> Track Now </Button> </div> </CardContent> </Card>"
    },
    {
      "file": "src/components/ui/date-range-picker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date range",
      "line": 68,
      "column": 21,
      "context": "t(date.from, \"LLL dd, y\") ) ) : ( <span>Pick a date range</span> )} </Button> </PopoverTri"
    },
    {
      "file": "src/components/ui/dialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Close",
      "line": 47,
      "column": 35,
      "context": "oreground\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </DialogPrimitive.Close> </DialogPrimitive.Content> </D"
    },
    {
      "file": "src/components/ui/sheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Close",
      "line": 68,
      "column": 35,
      "context": "secondary\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </SheetPrimitive.Close> </SheetPrimitive.Content> </She"
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Toggle Sidebar",
      "line": 280,
      "column": 33,
      "context": "}} {...props} > <PanelLeft /> <span className=\"sr-only\">Toggle Sidebar</span> </Button> ) }) SidebarTrigger.displayName = \"Sidebar"
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Toggle Sidebar",
      "line": 296,
      "column": 18,
      "context": "return ( <button ref={ref} data-sidebar=\"rail\" aria-label=\"Toggle Sidebar\" tabIndex={-1} onClick={toggleSidebar} title=\""
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Toggle Sidebar",
      "line": 299,
      "column": 13,
      "context": "=\"Toggle Sidebar\" tabIndex={-1} onClick={toggleSidebar} title=\"Toggle Sidebar\" className={cn( \"absolute inset-y-0 z-20 hidden w-"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics data is not available",
      "line": 62,
      "column": 18,
      "context": "<AlertCircle className=\"h-8 w-8 mx-auto mb-2\" /> <p>Analytics data is not available</p> <p className=\"text-sm mt-2\">"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "The required data for this section is missing or still loading. Please try again later.",
      "line": 64,
      "column": 17,
      "context": "is not available</p> <p className=\"text-sm mt-2\"> The required data for this section is missing or still loading. Please try again"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dataanalyse",
      "line": 94,
      "column": 44,
      "context": "6\"> {/* Header */} <div> <h2 className=\"text-2xl font-bold\">Dataanalyse</h2> <p className=\"text-muted-foreground\"> Avanser"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Avansert analyse av",
      "line": 96,
      "column": 11,
      "context": "-bold\">Dataanalyse</h2> <p className=\"text-muted-foreground\"> Avansert analyse av {student.name}s mønstre og trender </p> </div>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "s mønstre og trender",
      "line": 96,
      "column": 45,
      "context": "className=\"text-muted-foreground\"> Avansert analyse av {student.name}s mønstre og trender </p> </div> {/* Systemforklaring (Norw"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Systemforklaring",
      "line": 103,
      "column": 22,
      "context": "\"bg-card/60 border border-border/60\"> <CardHeader> <CardTitle>Systemforklaring</CardTitle> </CardHeader> <CardContent classNam"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Denne siden sammenfatter elevens data for å gi et oversiktlig bilde av\n            emosjoner, sanseinntrykk og miljøfaktorer over tid. Systemet bruker\n            statistiske metoder for å finne mønstre, beregne korrelasjoner og gi\n            anbefalinger. Korrelasjonskartet (varmekart) viser styrken på\n            sammenhenger mellom faktorer fra −1 (sterk negativ) til 1 (sterk\n            positiv). Bare tydeligere sammenhenger merkes med tall for å holde\n            visningen ryddig.",
      "line": 107,
      "column": 13,
      "context": "e-y-3 text-sm leading-relaxed text-muted-foreground\"> <p> Denne siden sammenfatter elevens data for å gi et oversiktlig bilde av"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Innsiktene genereres lokalt i nettleseren og tunge beregninger kjøres i en\n            web‑arbeider for å bevare ytelse. Ingen persondata sendes til en server.\n            Resultatene bør tolkes som støtte for faglig vurdering, ikke som fasit.",
      "line": 116,
      "column": 13,
      "context": "å holde visningen ryddig. </p> <p> Innsiktene genereres lokalt i nettleseren og tunge beregninger kjøres i en"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tips: Hold musepekeren over celler i varmekartet for detaljer som\n            korrelasjonsverdi og signifikans. Bruk filtrene over diagrammene for\n            å justere tidsrom og se hvordan mønstrene endrer seg.",
      "line": 121,
      "column": 13,
      "context": "</p> <p className=\"text-xs text-muted-foreground/80\"> Tips: Hold musepekeren over celler i varmekartet for detaljer som ko"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analysetillit og datakvalitet",
      "line": 141,
      "column": 13,
      "context": "tems-center gap-2\"> <AlertCircle className=\"h-5 w-5\" /> Analysetillit og datakvalitet </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Interaktiv datavisualisering",
      "line": 166,
      "column": 13,
      "context": "items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Interaktiv datavisualisering </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Laster innsikter...",
      "line": 187,
      "column": 16,
      "context": "p-2\"> <Loader className=\"h-5 w-5 animate-spin\" /> Laster innsikter... </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analyserer data...",
      "line": 191,
      "column": 51,
      "context": "items-center justify-center\"> <p className=\"text-muted-foreground\">Analyserer data...</p> </CardContent> </Card> ) : insi"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detaljerte innsikter",
      "line": 199,
      "column": 15,
      "context": "s-center gap-2\"> <TrendingUp className=\"h-5 w-5\" /> Detaljerte innsikter </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Oppdagede mønstre:",
      "line": 206,
      "column": 54,
      "context": "&& ( <div> <h4 className=\"font-semibold mb-2\">Oppdagede mønstre:</h4> <div className=\"space-y-2\">"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% sikkerhet",
      "line": 213,
      "column": 74,
      "context": "nded\"> {Math.round((pattern.confidence || 0) * 100)}% sikkerhet </span> </div>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anbefalinger:",
      "line": 219,
      "column": 69,
      "context": "ame=\"mt-2\"> <p className=\"text-xs font-medium mb-1\">Anbefalinger:</p> <ul className=\"text-xs text-muted-"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 222,
      "column": 45,
      "context": ").map((rec: string, i: number) => ( <li key={i}>• {rec}</li> ))} </ul>"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Korrelasjoner:",
      "line": 235,
      "column": 54,
      "context": "&& ( <div> <h4 className=\"font-semibold mb-2\">Korrelasjoner:</h4> <div className=\"space-y-2\">"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 240,
      "column": 84,
      "context": "<p className=\"text-sm font-medium\">{correlation.factor1} ↔ {correlation.factor2}</p> <span className=\"text-xs p"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "r =",
      "line": 242,
      "column": 29,
      "context": "xs px-2 py-1 bg-blue-500/20 text-blue-600 rounded\"> r = {correlation.correlation?.toFixed(2) || 'N/A'} </s"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Oversikt",
      "line": 86,
      "column": 46,
      "context": "er justify-between\"> <div> <h2 className=\"text-2xl font-bold\">Oversikt</h2> <p className=\"text-muted-foreground\"> Sammen"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sammendrag av",
      "line": 88,
      "column": 13,
      "context": "bold\">Oversikt</h2> <p className=\"text-muted-foreground\"> Sammendrag av {student.name}s data og aktivitet </p> </div>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "s data og aktivitet",
      "line": 88,
      "column": 41,
      "context": "<p className=\"text-muted-foreground\"> Sammendrag av {student.name}s data og aktivitet </p> </div> <Button onCl"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analysestatus",
      "line": 105,
      "column": 13,
      "context": "items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Analysestatus </CardTitle> </CardHeader> <CardContent>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 179,
      "column": 13,
      "context": "\"flex items-center gap-2\"> <Info className=\"h-5 w-5\" /> Datakvalitet </CardTitle> </CardHeader> <CardContent>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet kvalitetsscore",
      "line": 185,
      "column": 60,
      "context": "\"> <div> <p className=\"text-sm text-muted-foreground\">Samlet kvalitetsscore</p> <p className=\"text-3xl font-bold\">{dataQ"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI-genererte innsikter",
      "line": 246,
      "column": 15,
      "context": "\"> <TrendingUp className=\"h-5 w-5 animate-pulse\" /> AI-genererte innsikter </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI-genererte innsikter",
      "line": 261,
      "column": 15,
      "context": "s-center gap-2\"> <TrendingUp className=\"h-5 w-5\" /> AI-genererte innsikter </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nylige økter",
      "line": 279,
      "column": 54,
      "context": "gth > 0 && ( <div> <h3 className=\"text-lg font-semibold mb-4\">Nylige økter</h3> <PaginatedSessionsList sessions={filteredData.entrie"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Verktøy",
      "line": 90,
      "column": 44,
      "context": "6\"> {/* Header */} <div> <h2 className=\"text-2xl font-bold\">Verktøy</h2> <p className=\"text-muted-foreground\"> Avanserte v"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Avanserte verktøy for søk, maler og sammenligning",
      "line": 92,
      "column": 11,
      "context": "font-bold\">Verktøy</h2> <p className=\"text-muted-foreground\"> Avanserte verktøy for søk, maler og sammenligning </p> </div>"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading Interactive Visualization...",
      "line": 12,
      "column": 9,
      "context": "s-center gap-2\"> <Activity className=\"h-5 w-5 animate-pulse\" /> Loading Interactive Visualization... </CardTitle> </CardHeader> <C"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Failed to load Interactive Visualization",
      "line": 39,
      "column": 9,
      "context": "er gap-2 text-destructive\"> <AlertCircle className=\"h-5 w-5\" /> Failed to load Interactive Visualization </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "The interactive data visualization component could not be loaded. \n        This might be due to missing dependencies or a temporary loading issue.",
      "line": 44,
      "column": 9,
      "context": "> <CardContent> <p className=\"text-sm text-muted-foreground\"> The interactive data visualization component could not be loaded. This"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Please refresh the page or contact support if the issue persists.",
      "line": 48,
      "column": 9,
      "context": "ue. </p> <p className=\"text-sm text-muted-foreground mt-2\"> Please refresh the page or contact support if the issue persists. </p>"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading component...",
      "line": 20,
      "column": 56,
      "context": "to mb-4 text-primary\" /> <p className=\"text-sm text-muted-foreground\">Loading component...</p> </div> </div> <div className=\"space"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Failed to load component",
      "line": 36,
      "column": 53,
      "context": "iv className=\"text-center\"> <p className=\"text-destructive font-medium\">Failed to load component</p> <p className=\"text-sm text-muted-foreground"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Please refresh the page or try again later.",
      "line": 38,
      "column": 11,
      "context": "ponent</p> <p className=\"text-sm text-muted-foreground mt-2\"> Please refresh the page or try again later. </p> </div> </Card"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "LazyLoadWrapper Error:",
      "line": 80,
      "column": 18,
      "context": "componentDidCatch(error: Error, errorInfo: React.ErrorInfo) { logger.error('LazyLoadWrapper Error:', error, errorInfo); } render() { if (this.stat"
    },
    {
      "file": "src/components/lazy/LazyReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading Report Builder...",
      "line": 11,
      "column": 9,
      "context": "s-center gap-2\"> <FileText className=\"h-5 w-5 animate-pulse\" /> Loading Report Builder... </CardTitle> </CardHeader> <CardContent"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Visualization tabs",
      "line": 40,
      "column": 64,
      "context": "ssName=\"w-full\"> <TabsList className=\"grid w-full grid-cols-5\" aria-label=\"Visualization tabs\"> <TabsTrigger value=\"trends\" className=\"flex items-"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Trends",
      "line": 43,
      "column": 11,
      "context": "lex items-center gap-2\"> <TrendingUp className=\"h-4 w-4\" /> Trends </TabsTrigger> <TabsTrigger value=\"correlations\" classNam"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlations",
      "line": 47,
      "column": 11,
      "context": "e=\"flex items-center gap-2\"> <Target className=\"h-4 w-4\" /> Correlations </TabsTrigger> <TabsTrigger value=\"patterns\" classN"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Patterns",
      "line": 51,
      "column": 11,
      "context": "Name=\"flex items-center gap-2\"> <Zap className=\"h-4 w-4\" /> Patterns </TabsTrigger> <TabsTrigger value=\"3d\" className=\"flex"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "3D View",
      "line": 55,
      "column": 11,
      "context": "Name=\"flex items-center gap-2\"> <Eye className=\"h-4 w-4\" /> 3D View </TabsTrigger> <TabsTrigger value=\"timeline\" className=\""
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Timeline",
      "line": 59,
      "column": 11,
      "context": "me=\"flex items-center gap-2\"> <Clock className=\"h-4 w-4\" /> Timeline </TabsTrigger> </TabsList> <TabsContent value=\"tre"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Avg Emotion Intensity",
      "line": 70,
      "column": 76,
      "context": "div> <p className=\"text-sm font-medium text-muted-foreground\">Avg Emotion Intensity</p> <p className=\"text-2xl font-bold\">"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Positive Emotion Rate",
      "line": 86,
      "column": 76,
      "context": "div> <p className=\"text-sm font-medium text-muted-foreground\">Positive Emotion Rate</p> <p className=\"text-2xl font-bold\">"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory Seeking Rate",
      "line": 104,
      "column": 76,
      "context": "div> <p className=\"text-sm font-medium text-muted-foreground\">Sensory Seeking Rate</p> <p className=\"text-2xl font-bold\">"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Significant Correlations",
      "line": 126,
      "column": 26,
      "context": "gth > 0 && ( <Card> <CardHeader> <CardTitle>Significant Correlations</CardTitle> </CardHeader> <Card"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 134,
      "column": 107,
      "context": "air.factor1.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} ↔{' '} {pair.factor2.replace(/([A-Z])/g, ' $1').replace("
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "correlation (r =",
      "line": 138,
      "column": 74,
      "context": "ound\"> {pair.correlation > 0 ? 'Positive' : 'Negative'} correlation (r = {pair.correlation.toFixed(3)}) </p>"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select visualizations to display",
      "line": 21,
      "column": 36,
      "context": "sName=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p className=\"text-lg\">Select visualizations to display</p> <p className=\"text-sm\">Choose f"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Choose from the options above",
      "line": 22,
      "column": 36,
      "context": "ext-lg\">Select visualizations to display</p> <p className=\"text-sm\">Choose from the options above</p> </div> </CardContent>"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select a visualization to focus on",
      "line": 49,
      "column": 36,
      "context": "sName=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p className=\"text-lg\">Select a visualization to focus on</p> <p className=\"text-sm\">Choose"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Choose from the options above",
      "line": 50,
      "column": 36,
      "context": "t-lg\">Select a visualization to focus on</p> <p className=\"text-sm\">Choose from the options above</p> </div> </CardContent>"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[EChartContainer] Option normalization failed",
      "line": 336,
      "column": 22,
      "context": "tion; } catch (e) { if (import.meta?.env?.DEV) { logger.error(\"[EChartContainer] Option normalization failed\", { error: e }); } re"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[EChartContainer] Theme merge failed",
      "line": 449,
      "column": 22,
      "context": "tion; } catch (e) { if (import.meta?.env?.DEV) { logger.error(\"[EChartContainer] Theme merge failed\", { error: e, optionP"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No data available for selected time range",
      "line": 34,
      "column": 16,
      "context": "<Activity className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>No data available for selected time range</p> <p className=\"text-xs"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Try expanding the time range or adjusting filters",
      "line": 35,
      "column": 41,
      "context": "a available for selected time range</p> <p className=\"text-xs mt-1\">Try expanding the time range or adjusting filters</p> </div> <"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "TrendsChart.renderChart failed",
      "line": 77,
      "column": 18,
      "context": "ontainer option={option} height={400} />; } catch (error) { logger.error(\"TrendsChart.renderChart failed\", { error }); return ( <div className="
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Could not render chart",
      "line": 82,
      "column": 14,
      "context": "<Activity className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>Could not render chart</p> <p className=\"text-xs mt-1\">An internal err"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "An internal error occurred while building the chart",
      "line": 83,
      "column": 39,
      "context": "> <p>Could not render chart</p> <p className=\"text-xs mt-1\">An internal error occurred while building the chart</p> </div> </d"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Insufficient data for correlation analysis",
      "line": 25,
      "column": 14,
      "context": "<BarChart3 className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>Insufficient data for correlation analysis</p> <p className=\"text-sm\">"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "At least 10 tracking entries needed",
      "line": 26,
      "column": 34,
      "context": "Insufficient data for correlation analysis</p> <p className=\"text-sm\">At least 10 tracking entries needed</p> <div className=\"mt-3 flex item"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Retry correlation analysis",
      "line": 31,
      "column": 26,
      "context": "size=\"sm\" variant=\"outline\" aria-label=\"Retry correlation analysis\" title=\"Retry correlation analysis\""
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Retry correlation analysis",
      "line": 32,
      "column": 21,
      "context": "line\" aria-label=\"Retry correlation analysis\" title=\"Retry correlation analysis\" onClick={onRetry} >"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Retry",
      "line": 35,
      "column": 15,
      "context": "rrelation analysis\" onClick={onRetry} > Retry </Button> <Button size=\"sm\""
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Show all time range",
      "line": 40,
      "column": 26,
      "context": "size=\"sm\" variant=\"ghost\" aria-label=\"Show all time range\" title=\"Show all time range\" on"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Show all time range",
      "line": 41,
      "column": 21,
      "context": "iant=\"ghost\" aria-label=\"Show all time range\" title=\"Show all time range\" onClick={onShowAllTime} >"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Show all time",
      "line": 44,
      "column": 15,
      "context": "l time range\" onClick={onShowAllTime} > Show all time </Button> </div> </div> </div>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading chart data",
      "line": 68,
      "column": 23,
      "context": "border-red-200'; }; if (isAnalyzing) { return ( <div aria-label=\"Loading chart data\" className=\"h-[400px] w-full\"> <div className=\"h-ful"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No patterns detected yet",
      "line": 79,
      "column": 14,
      "context": "\"> <Zap className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>No patterns detected yet</p> <p className=\"text-sm\">Need more data for"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Need more data for pattern analysis",
      "line": 80,
      "column": 34,
      "context": "\" /> <p>No patterns detected yet</p> <p className=\"text-sm\">Need more data for pattern analysis</p> </div> </div> ); }"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detected Patterns (",
      "line": 92,
      "column": 13,
      "context": "lex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Detected Patterns ({patterns.length}) </h3> <div className=\""
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern",
      "line": 109,
      "column": 79,
      "context": "> <h4 className=\"font-medium capitalize\">{pattern.type} Pattern</h4> <Badge className={getConfidenceColor(patter"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% confident",
      "line": 111,
      "column": 65,
      "context": "n.confidence)}> {Math.round(pattern.confidence * 100)}% confident </Badge> </div>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Frequency:",
      "line": 115,
      "column": 25,
      "context": "<p className=\"text-sm text-muted-foreground mb-2\"> Frequency: {pattern.frequency} occurrences </p>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "occurrences",
      "line": 115,
      "column": 56,
      "context": "-muted-foreground mb-2\"> Frequency: {pattern.frequency} occurrences </p> {(pattern.recommend"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 119,
      "column": 62,
      "context": "sName=\"space-y-1\"> <p className=\"text-sm font-medium\">Recommendations:</p> {(pattern.recommendations ?? [])."
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Predictive Insights (",
      "line": 141,
      "column": 13,
      "context": "items-center gap-2\"> <TrendingUp className=\"h-5 w-5\" /> Predictive Insights ({predictiveInsights.length}) </h3> <div"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% confidence",
      "line": 161,
      "column": 65,
      "context": "iant=\"outline\"> {Math.round(insight.confidence * 100)}% confidence </Badge> </div>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Prediction:",
      "line": 171,
      "column": 67,
      "context": "sName=\"mb-2\"> <p className=\"text-sm font-medium mb-1\">Prediction:</p> <div className=\"flex items-center gap-"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 195,
      "column": 62,
      "context": "sName=\"space-y-1\"> <p className=\"text-sm font-medium\">Recommendations:</p> {insight.recommendations.slice(0,"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Severity:",
      "line": 209,
      "column": 29,
      "context": "<Shield className=\"h-3 w-3\" /> Severity: <span className=\"font-medium capitalize\">{insight.severity}</span>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detected Anomalies (",
      "line": 226,
      "column": 13,
      "context": "ms-center gap-2\"> <AlertTriangle className=\"h-5 w-5\" /> Detected Anomalies ({anomalies.length}) </h3> <div className"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly",
      "line": 242,
      "column": 71,
      "context": "\"flex-1\"> <h4 className=\"font-medium mb-1\">{anomaly.type} Anomaly</h4> <p className=\"text-sm text-muted-foreground m"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Severity:",
      "line": 244,
      "column": 25,
      "context": "<p className=\"text-sm text-muted-foreground mb-2\"> Severity: <span className=\"font-medium capitalize\">{anomaly.severity}</span>"
    }
  ]
}